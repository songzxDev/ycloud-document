webpackJsonp([22],[,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(){var t={code:{type:"\n      <template>\n        <y-button>Default</y-button>\n        <y-button params=\"type: 'primary', size: 'large'\">Primary</y-button>\n        <y-button params=\"type: 'ghost', size: 'large'\">Ghost</y-button>\n        <y-button params=\"type: 'dashed'\">Dashed</y-button>\n        <y-button params=\"type: 'text'\">Text</y-button>\n        <y-button params=\"type: 'info'\">Info</y-button>\n        <y-button params=\"type: 'success'\">Success</y-button>\n        <y-button params=\"type: 'warning'\">Warning</y-button>\n        <y-button params=\"type: 'error'\">Error</y-button>\n      </template>\n      ",shape:"\n      <template>\n        <y-button params=\"type: 'warning', shape: 'circle'\">0.0</y-button>\n        <y-button params=\"type: 'warning'\">0.0</y-button>\n      </template>\n      ",size:"\n      <template>\n        <y-button params=\"type: 'ghost', size: 'large'\">Large</y-button>\n        <y-button params=\"type: 'ghost'\">Default</y-button>\n        <y-button params=\"type: 'ghost', size: 'small'\">Small</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle', size: 'large'\">Large</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle'\">Default</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle', size: 'small'\">Small</y-button>\n      </template>\n      ",disabled:"\n      <template>\n        <y-button params=\"type: 'primary'\">Default</y-button>\n        <y-button params=\"type: 'primary', disabled: true\">Default(Disabled)</y-button>\n      </template>\n      ",loading:"\n      <template>\n        <y-button params=\"type: 'success'\">Success</y-button>\n        <y-button params=\"type: 'success', click: $parent.load, loading: $parent.loading\">Loading</y-button>\n      </template>\n      <script>\n        var viewmodel = {\n          loading: ko.observable(false),\n          load: () => {\n            viewModel.loading(true)\n            setTimeout(() => {\n              viewModel.loading(false)\n            }, 3000)\n          }\n        }\n      <\/script>\n      ",wait:"\n      <template>\n        <y-button params=\"type: 'error', click: $parent.wait\">Default</y-button>\n        <y-button params=\"type: 'error', click: $parent.wait, wait: 3000\">wait</y-button>\n      </template>\n      <script>\n        wait: () => {}\n      <script>\n      ",btnType_a:"\n      <template>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com'\">相对路径本页跳转</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', rootPath: true\">绝对路径本页跳转</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', target: '_blank'\">相对路径打开新开页</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', rootPath: true, target: '_blank'\">绝对路径打开新开页</y-button>\n      </template>\n      "},loading:a.default.observable(!1),load:function(){t.loading(!0),setTimeout(function(){t.loading(!1)},3e3)},wait:function(){}};a.default.applyBindings(t,document.getElementById("app"))}Object.defineProperty(e,"__esModule",{value:!0});var o=n(61),r=_interopRequireDefault(o),i=n(0),a=_interopRequireDefault(i);n(41),e.default={template:r.default,init:init}},,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n(42),n(57)},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(t){this.code=t.code,this.isShowAll=a.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var o=n(43),r=_interopRequireDefault(o);n(44),n(45);var i=n(0),a=_interopRequireDefault(i);a.default.components.register("demo",{viewModel:init,template:r.default})},function(t,e){t.exports='<div class="demo">\r\n  <div class="demo-show">\r\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\r\n  </div>\r\n  <div class="demo-split"></div>\r\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\r\n    <y-code params="code:code"></y-code>\r\n  </div>\r\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\r\n</div>\r\n'},function(t,e){},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function Init(t,e){var n=this;this.$el=e.childNodes[0].childNodes[3],this.code=t.code,this.copy=function(){var e=new u.default(".copy",{text:function(){return t.code}});e.on("success",function(t){t.clearSelection(),e.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){l.default.highlightBlock(n.$el)})}var o=n(46),r=_interopRequireDefault(o);n(47);var i=n(0),a=_interopRequireDefault(i),s=n(3),l=_interopRequireDefault(s),c=n(48),u=_interopRequireDefault(c);n(56),a.default.components.register("y-code",{viewModel:{createViewModel:function(t,e){return new Init(t,e.element)}},template:r.default})},function(t,e){t.exports='<div class="code">\r\n  <div class="tools">\r\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\r\n  </div>\r\n  <pre><code class="html" data-bind="text: code"></code></pre>\r\n</div>\r\n'},function(t,e){},function(t,e,n){var o,r,i;!function(a,s){r=[t,n(49),n(51),n(52)],o=s,void 0!==(i="function"==typeof o?o.apply(e,r):o)&&(t.exports=i)}(0,function(t,e,n,o){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function getAttributeValue(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var r=_interopRequireDefault(e),i=_interopRequireDefault(n),a=_interopRequireDefault(o),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}(),c=function(t){function Clipboard(t,e){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(e),n.listenClick(t),n}return _inherits(Clipboard,t),l(Clipboard,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===s(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,a.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new r.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return getAttributeValue("action",t)}},{key:"defaultTarget",value:function(t){var e=getAttributeValue("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return getAttributeValue("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),Clipboard}(i.default);t.exports=c})},function(t,e,n){var o,r,i;!function(a,s){r=[t,n(50)],o=s,void 0!==(i="function"==typeof o?o.apply(e,r):o)&&(t.exports=i)}(0,function(t,e){"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(t){return t&&t.__esModule?t:{default:t}}(e),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}(),i=function(){function ClipboardAction(t){_classCallCheck(this,ClipboardAction),this.resolveOptions(t),this.initSelection()}return r(ClipboardAction,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var o=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=o+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":o(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),ClipboardAction}();t.exports=i})},function(t,e){function select(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),r=document.createRange();r.selectNodeContents(t),o.removeAllRanges(),o.addRange(r),e=o.toString()}return e}t.exports=select},function(t,e){function E(){}E.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function listener(){o.off(t,listener),e.apply(n,arguments)}var o=this;return listener._=e,this.on(t,listener,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,r=n.length;for(o;o<r;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],r=[];if(o&&e)for(var i=0,a=o.length;i<a;i++)o[i].fn!==e&&o[i].fn._!==e&&r.push(o[i]);return r.length?n[t]=r:delete n[t],this}},t.exports=E},function(t,e,n){function listen(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!o.string(e))throw new TypeError("Second argument must be a String");if(!o.fn(n))throw new TypeError("Third argument must be a Function");if(o.node(t))return listenNode(t,e,n);if(o.nodeList(t))return listenNodeList(t,e,n);if(o.string(t))return listenSelector(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function listenNodeList(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function listenSelector(t,e,n){return r(document.body,t,e,n)}var o=n(53),r=n(54);t.exports=listen},function(t,e){e.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},e.nodeList=function(t){var n=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in t&&(0===t.length||e.node(t[0]))},e.string=function(t){return"string"==typeof t||t instanceof String},e.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e,n){function _delegate(t,e,n,o,r){var i=listener.apply(this,arguments);return t.addEventListener(n,i,r),{destroy:function(){t.removeEventListener(n,i,r)}}}function delegate(t,e,n,o,r){return"function"==typeof t.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return _delegate(t,e,n,o,r)}))}function listener(t,e,n,r){return function(n){n.delegateTarget=o(n.target,e),n.delegateTarget&&r.call(t,n)}}var o=n(55);t.exports=delegate},function(t,e){function closest(t,e){for(;t&&t.nodeType!==n;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var o=Element.prototype;o.matches=o.matchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector||o.webkitMatchesSelector}t.exports=closest},function(t,e){},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(t){this.name=t.name||"",this.link=t.link||""}var o=n(58),r=_interopRequireDefault(o);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:r.default})},function(t,e){t.exports='<h1>\r\n  <span data-bind="text: name"></span>组件\r\n</h1>\r\n\x3c!-- ko if: link--\x3e\r\n<h2>\r\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\r\n    <span data-bind="text: name"></span>组件API文档\r\n  </a>\r\n</h2>\r\n\x3c!-- /ko --\x3e\r\n<h2>代码示例</h2>\r\n'},,,function(t,e){t.exports='<div class="y-box">\r\n  <y-title params="name: \'Button按钮\', link: \'https://github.com/yonyouyc/blog/issues/36\'"></y-title>\r\n  <demo params="code:code.type">\r\n    <div class="code-top">\r\n      <y-button>Default</y-button>\r\n      <y-button params="type: \'primary\'">Primary</y-button>\r\n      <y-button params="type: \'ghost\'">Ghost</y-button>\r\n      <y-button params="type: \'dashed\'">Dashed</y-button>\r\n      <y-button params="type: \'text\'">Text</y-button>\r\n      <hr class="hr-fix">\r\n      <y-button params="type: \'info\'">Info</y-button>\r\n      <y-button params="type: \'success\'">Success</y-button>\r\n      <y-button params="type: \'warning\'">Warning</y-button>\r\n      <y-button params="type: \'error\'">Error</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>基础用法</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      按钮类型有：默认按钮、主按钮、幽灵按钮、虚线按钮、文字按钮以及四种颜色按钮。\r\n      通过设置<code>type</code>为<code>primary</code>、<code>ghost</code>、<code>dashed</code>、<code>text</code>、<code>info</code>、<code>success</code>、<code>warning</code>、<code>error</code>创建不同样式的按钮，不设置为默认样式。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.shape">\r\n    <div class="code-top">\r\n      <y-button params="type: \'warning\', shape: \'circle\'">0.0</y-button>\r\n      <y-button params="type: \'warning\'">0.0</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>按钮形状</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      通过设置<code>shape</code>属性为<code>circle</code>，可将按钮置为圆的形状。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.size">\r\n    <div class="code-top">\r\n      <y-button params="type: \'ghost\', size: \'large\'">Large</y-button>\r\n      <y-button params="type: \'ghost\'">Default</y-button>\r\n      <y-button params="type: \'ghost\', size: \'small\'">Small</y-button>\r\n      <hr class="hr-fix">\r\n      <y-button params="type: \'ghost\', shape: \'circle\', size: \'large\'">Large</y-button>\r\n      <y-button params="type: \'ghost\', shape: \'circle\'">Default</y-button>\r\n      <y-button params="type: \'ghost\', shape: \'circle\', size: \'small\'">Small</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>按钮尺寸</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      按钮有三种尺寸：大、默认（中）、小\r\n      通过设置<code>size</code>为<code>large</code>和<code>small</code>将按钮设置为大和小尺寸，不设置为默认（中）尺寸。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.disabled">\r\n    <div class="code-top">\r\n      <y-button params="type: \'primary\'">Default</y-button>\r\n      <y-button params="type: \'primary\', disabled: true">Default(Disabled)</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>不可用状态</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      通过添加<code>disabled</code>属性可将按钮设置为不可用状态。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.loading">\r\n    <div class="code-top">\r\n      <y-button params="type: \'success\'">Success</y-button>\r\n      <y-button params="type: \'success\', click: $parent.load, loading: $parent.loading">Loading</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>加载中状态</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      通过添加<code>loading</code>属性可以让按钮处于加载中状态，后两个按钮在点击时进入加载状态。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.wait">\r\n    <div class="code-top">\r\n      <y-button params="type: \'error\', click: $parent.wait">Default</y-button>\r\n      <y-button params="type: \'error\', click: $parent.wait, wait: 3000">wait</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>设置等待时间</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      通过添加<code>wait</code>属性为<code>n毫秒数</code>，可以让按钮处于不可点击状态，防止快速点击多次触发事件。\r\n    </div>\r\n  </demo>\r\n\r\n  <demo params="code:code.btnType_a">\r\n    <div class="code-top">\r\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\'">相对路径本页跳转</y-button>\r\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', rootPath: true">绝对路径本页跳转</y-button>\r\n      <hr class="hr-fix">\r\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', target: \'_blank\'">相对路径打开新开页</y-button>\r\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', rootPath: true, target: \'_blank\'">绝对路径打开新开页</y-button>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>btnType设置为a时</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      通过设置<code>btnType</code>为<code>a</code>，添加<code>url</code>为<code>目标url</code>，添加<code>rootPath</code>为<code>false/true(默认为false)</code>控制本页跳转或者新页面打开，<code>target</code>与a的target保持一致，规定在何处打开链接文档。\r\n    </div>\r\n  </demo>\r\n</div>\r\n'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbGlicy4yMi40NGFjN2I3YjFmNTJmNTc0YjI4ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2RlbW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZGVtby9pbmRleC5odG1sIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29kZS9pbmRleC5odG1sIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGlwYm9hcmQvbGliL2NsaXBib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xpcGJvYXJkL2xpYi9jbGlwYm9hcmQtYWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWxlY3Qvc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nb29kLWxpc3RlbmVyL3NyYy9saXN0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2QtbGlzdGVuZXIvc3JjL2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWxlZ2F0ZS9zcmMvZGVsZWdhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlbGVnYXRlL3NyYy9jbG9zZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RpdGxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RpdGxlL2luZGV4Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2J1dHRvbi9pbmRleC5odG1sIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaW5pdCIsInZpZXdNb2RlbCIsImNvZGUiLCJ0eXBlIiwic2hhcGUiLCJzaXplIiwiZGlzYWJsZWQiLCJsb2FkaW5nIiwid2FpdCIsImJ0blR5cGVfYSIsIl9rbm9ja291dDIiLCJvYnNlcnZhYmxlIiwibG9hZCIsInNldFRpbWVvdXQiLCJhcHBseUJpbmRpbmdzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfaW5kZXgiLCJfaW5kZXgyIiwiX2tub2Nrb3V0IiwidGVtcGxhdGUiLCJwYXJhbXMiLCJ0aGlzIiwiaXNTaG93QWxsIiwidG9nZ2xlIiwiYmluZCIsImNvbXBvbmVudHMiLCJyZWdpc3RlciIsIkluaXQiLCJlbCIsIl90aGlzIiwiJGVsIiwiY2hpbGROb2RlcyIsImNvcHkiLCJjbGlwYm9hcmQiLCJfY2xpcGJvYXJkMiIsInRleHQiLCJvbiIsImUiLCJjbGVhclNlbGVjdGlvbiIsImRlc3Ryb3kiLCJ3aW5kb3ciLCJhbGVydCIsIl9oaWdobGlnaHRqczIiLCJoaWdobGlnaHRCbG9jayIsIl9oaWdobGlnaHRqcyIsIl9jbGlwYm9hcmQiLCJjcmVhdGVWaWV3TW9kZWwiLCJjb21wb25lbnRJbmZvIiwiZWxlbWVudCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl9jbGlwYm9hcmRBY3Rpb24iLCJfdGlueUVtaXR0ZXIiLCJfZ29vZExpc3RlbmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJnZXRBdHRyaWJ1dGVWYWx1ZSIsInN1ZmZpeCIsImF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsIl9jbGlwYm9hcmRBY3Rpb24yIiwiX3RpbnlFbWl0dGVyMiIsIl9nb29kTGlzdGVuZXIyIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDbGlwYm9hcmQiLCJfRW1pdHRlciIsInRyaWdnZXIiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJyZXNvbHZlT3B0aW9ucyIsImxpc3RlbkNsaWNrIiwiYXJndW1lbnRzIiwiYWN0aW9uIiwiZGVmYXVsdEFjdGlvbiIsImRlZmF1bHRUYXJnZXQiLCJkZWZhdWx0VGV4dCIsImNvbnRhaW5lciIsImJvZHkiLCJfdGhpczIiLCJsaXN0ZW5lciIsIm9uQ2xpY2siLCJkZWxlZ2F0ZVRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJjbGlwYm9hcmRBY3Rpb24iLCJlbWl0dGVyIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiYWN0aW9ucyIsInN1cHBvcnQiLCJxdWVyeUNvbW1hbmRTdXBwb3J0ZWQiLCJmb3JFYWNoIiwiX3NlbGVjdCIsIl9zZWxlY3QyIiwiQ2xpcGJvYXJkQWN0aW9uIiwiaW5pdFNlbGVjdGlvbiIsInNlbGVjdGVkVGV4dCIsInNlbGVjdEZha2UiLCJzZWxlY3RUYXJnZXQiLCJpc1JUTCIsImRvY3VtZW50RWxlbWVudCIsInJlbW92ZUZha2UiLCJmYWtlSGFuZGxlckNhbGxiYWNrIiwiZmFrZUhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZmFrZUVsZW0iLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJmb250U2l6ZSIsImJvcmRlciIsInBhZGRpbmciLCJtYXJnaW4iLCJwb3NpdGlvbiIsInlQb3NpdGlvbiIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwidG9wIiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjb3B5VGV4dCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInN1Y2NlZWRlZCIsImV4ZWNDb21tYW5kIiwiZXJyIiwiaGFuZGxlUmVzdWx0IiwiZW1pdCIsImZvY3VzIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwic2V0IiwiX2FjdGlvbiIsIkVycm9yIiwiZ2V0Iiwibm9kZVR5cGUiLCJfdGFyZ2V0Iiwic2VsZWN0Iiwibm9kZU5hbWUiLCJpc1JlYWRPbmx5Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZWxlY3Rpb24iLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiYWRkUmFuZ2UiLCJ0b1N0cmluZyIsIkUiLCJuYW1lIiwiY2FsbGJhY2siLCJjdHgiLCJwdXNoIiwiZm4iLCJvbmNlIiwib2ZmIiwiXyIsImRhdGEiLCJzbGljZSIsImV2dEFyciIsImxlbiIsImV2dHMiLCJsaXZlRXZlbnRzIiwibGlzdGVuIiwiaXMiLCJzdHJpbmciLCJub2RlIiwibGlzdGVuTm9kZSIsIm5vZGVMaXN0IiwibGlzdGVuTm9kZUxpc3QiLCJsaXN0ZW5TZWxlY3RvciIsIkFycmF5IiwiZGVsZWdhdGUiLCJIVE1MRWxlbWVudCIsIlN0cmluZyIsIl9kZWxlZ2F0ZSIsInVzZUNhcHR1cmUiLCJsaXN0ZW5lckZuIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWFwIiwiY2xvc2VzdCIsIkRPQ1VNRU5UX05PREVfVFlQRSIsIm1hdGNoZXMiLCJwYXJlbnROb2RlIiwiRWxlbWVudCIsInByb3RvIiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibGluayJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsS0FDUCxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNDLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBRUYsU0FBVUMsRUFBUUMsRUFBU0MsR0FFakMsWUFpQkEsU0FBU0Msd0JBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLEdDbkN2RixRQUFTRyxRQUNQLEdBQUlDLElBQ0ZDLE1BQ0VDLDJtQkFhQUMsaU1BTUFDLHNoQkFVQUMscU5BTUFDLG9nQkFpQkFDLDhSQVNBQyxxZ0JBU0ZGLFFBQVNHLEVBQUFYLFFBQUdZLFlBQVcsR0FDdkJDLEtBQU0sV0FDSlgsRUFBVU0sU0FBUSxHQUNsQk0sV0FBVyxXQUNUWixFQUFVTSxTQUFRLElBQ2pCLE1BRUxDLEtBQU0sYUFFUkUsR0FBQVgsUUFBR2UsY0FBY2IsRUFBV2MsU0FBU0MsZUFBZSxRRDdEdERDLE9BQU9DLGVBQWV4QixFQUFTLGNBQzdCeUIsT0FBTyxHQ3pCVCxJQUFBQyxHQUFBekIsRUFBQSxJRDhCSTBCLEVBQVV6Qix1QkFBdUJ3QixHQzdCckNFLEVBQUEzQixFQUFBLEdEaUNJZSxFQUFhZCx1QkFBdUIwQixFQ2hDeEMzQixHQUFBLElENERBRCxFQUFRSyxTQzBCTndCLG1CQUNBdkIsWURyQk0sQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENBQ0EsQ0FDQSxDQUNBLENB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SCxFQUFBSSxrQkFDQUosRUFBQUssc0JBb0JBM08sRUFBQUMsUUFBQWdPLFNkaWhDTSxTQUFVak8sRUFBUUMsS0FNbEIsU0FBVUQsRUFBUUMsRUFBU0MsR0FFakMsWUFXQSxTQUFTQyx3QkFBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR2Vsa0N2RixRQUFTRyxNQUFNd0IsR0FDYkMsS0FBS2lLLEtBQU9sSyxFQUFPa0ssTUFBUSxHQUMzQmpLLEtBQUs0TSxLQUFPN00sRUFBTzZNLE1BQVEsR0FKN0IsR0FBQWpOLEdBQUF6QixFQUFBLElmOGpDSTBCLEVBQVV6Qix1QkFBdUJ3QixFQUlwQnhCLHdCZWprQ2pCRCxFQUFBLElBS0FJLFFBQUc4QixXQUFXQyxTQUFTLFdBQ3JCN0IsVUFBV0QsS0FDWHVCLHNCZnlrQ0ksU0FBVTlCLEVBQVFDLEdnQmpsQ3hCRCxFQUFBQyxRQUFBLGtTaEJzbENRLENBQ0EsQ0FFRixTQUFVRCxFQUFRQyxHaUJ6bEN4QkQsRUFBQUMsUUFBQSIsImZpbGUiOiJsaWJzLjIyLjQ0YWM3YjdiMWY1MmY1NzRiMjhlLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2VicGFja0pzb25wKFsyMl0sW1xuLyogMCAqLyxcbi8qIDEgKi8sXG4vKiAyICovLFxuLyogMyAqLyxcbi8qIDQgKi8sXG4vKiA1ICovLFxuLyogNiAqLyxcbi8qIDcgKi8sXG4vKiA4ICovLFxuLyogOSAqLyxcbi8qIDEwICovLFxuLyogMTEgKi8sXG4vKiAxMiAqLyxcbi8qIDEzICovLFxuLyogMTQgKi8sXG4vKiAxNSAqLyxcbi8qIDE2ICovLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4KTtcblxudmFyIF9rbm9ja291dCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfa25vY2tvdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa25vY2tvdXQpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgdmFyIHZpZXdNb2RlbCA9IHtcbiAgICBjb2RlOiB7XG4gICAgICB0eXBlOiAnXFxuICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgPHktYnV0dG9uPkRlZmF1bHQ8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ3ByaW1hcnlcXCcsIHNpemU6IFxcJ2xhcmdlXFwnXCI+UHJpbWFyeTwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnZ2hvc3RcXCcsIHNpemU6IFxcJ2xhcmdlXFwnXCI+R2hvc3Q8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2Rhc2hlZFxcJ1wiPkRhc2hlZDwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwndGV4dFxcJ1wiPlRleHQ8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2luZm9cXCdcIj5JbmZvPC95LWJ1dHRvbj5cXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdzdWNjZXNzXFwnXCI+U3VjY2VzczwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnd2FybmluZ1xcJ1wiPldhcm5pbmc8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2Vycm9yXFwnXCI+RXJyb3I8L3ktYnV0dG9uPlxcbiAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgJyxcbiAgICAgIHNoYXBlOiAnXFxuICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ3dhcm5pbmdcXCcsIHNoYXBlOiBcXCdjaXJjbGVcXCdcIj4wLjA8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ3dhcm5pbmdcXCdcIj4wLjA8L3ktYnV0dG9uPlxcbiAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgJyxcbiAgICAgIHNpemU6ICdcXG4gICAgICA8dGVtcGxhdGU+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnZ2hvc3RcXCcsIHNpemU6IFxcJ2xhcmdlXFwnXCI+TGFyZ2U8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2dob3N0XFwnXCI+RGVmYXVsdDwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnZ2hvc3RcXCcsIHNpemU6IFxcJ3NtYWxsXFwnXCI+U21hbGw8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2dob3N0XFwnLCBzaGFwZTogXFwnY2lyY2xlXFwnLCBzaXplOiBcXCdsYXJnZVxcJ1wiPkxhcmdlPC95LWJ1dHRvbj5cXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdnaG9zdFxcJywgc2hhcGU6IFxcJ2NpcmNsZVxcJ1wiPkRlZmF1bHQ8L3ktYnV0dG9uPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2dob3N0XFwnLCBzaGFwZTogXFwnY2lyY2xlXFwnLCBzaXplOiBcXCdzbWFsbFxcJ1wiPlNtYWxsPC95LWJ1dHRvbj5cXG4gICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICcsXG4gICAgICBkaXNhYmxlZDogJ1xcbiAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdwcmltYXJ5XFwnXCI+RGVmYXVsdDwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwncHJpbWFyeVxcJywgZGlzYWJsZWQ6IHRydWVcIj5EZWZhdWx0KERpc2FibGVkKTwveS1idXR0b24+XFxuICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAnLFxuICAgICAgbG9hZGluZzogJ1xcbiAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdzdWNjZXNzXFwnXCI+U3VjY2VzczwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnc3VjY2Vzc1xcJywgY2xpY2s6ICRwYXJlbnQubG9hZCwgbG9hZGluZzogJHBhcmVudC5sb2FkaW5nXCI+TG9hZGluZzwveS1idXR0b24+XFxuICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICA8c2NyaXB0PlxcbiAgICAgICAgdmFyIHZpZXdtb2RlbCA9IHtcXG4gICAgICAgICAgbG9hZGluZzoga28ub2JzZXJ2YWJsZShmYWxzZSksXFxuICAgICAgICAgIGxvYWQ6ICgpID0+IHtcXG4gICAgICAgICAgICB2aWV3TW9kZWwubG9hZGluZyh0cnVlKVxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgICAgICAgICAgdmlld01vZGVsLmxvYWRpbmcoZmFsc2UpXFxuICAgICAgICAgICAgfSwgMzAwMClcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIDwvc2NyaXB0PlxcbiAgICAgICcsXG4gICAgICB3YWl0OiAnXFxuICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6IFxcJ2Vycm9yXFwnLCBjbGljazogJHBhcmVudC53YWl0XCI+RGVmYXVsdDwveS1idXR0b24+XFxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnZXJyb3JcXCcsIGNsaWNrOiAkcGFyZW50LndhaXQsIHdhaXQ6IDMwMDBcIj53YWl0PC95LWJ1dHRvbj5cXG4gICAgICA8L3RlbXBsYXRlPlxcbiAgICAgIDxzY3JpcHQ+XFxuICAgICAgICB3YWl0OiAoKSA9PiB7fVxcbiAgICAgIDxzY3JpcHQ+XFxuICAgICAgJyxcbiAgICAgIGJ0blR5cGVfYTogJ1xcbiAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnaW5mb1xcJywgYnRuVHlwZTogXFwnYVxcJywgdXJsOiBcXCd3d3cuYmFpZHUuY29tXFwnXCI+XFx1NzZGOFxcdTVCRjlcXHU4REVGXFx1NUY4NFxcdTY3MkNcXHU5ODc1XFx1OERGM1xcdThGNkM8L3ktYnV0dG9uPlxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdpbmZvXFwnLCBidG5UeXBlOiBcXCdhXFwnLCB1cmw6IFxcJ3d3dy5iYWlkdS5jb21cXCcsIHJvb3RQYXRoOiB0cnVlXCI+XFx1N0VERFxcdTVCRjlcXHU4REVGXFx1NUY4NFxcdTY3MkNcXHU5ODc1XFx1OERGM1xcdThGNkM8L3ktYnV0dG9uPlxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiBcXCdpbmZvXFwnLCBidG5UeXBlOiBcXCdhXFwnLCB1cmw6IFxcJ3d3dy5iYWlkdS5jb21cXCcsIHRhcmdldDogXFwnX2JsYW5rXFwnXCI+XFx1NzZGOFxcdTVCRjlcXHU4REVGXFx1NUY4NFxcdTYyNTNcXHU1RjAwXFx1NjVCMFxcdTVGMDBcXHU5ODc1PC95LWJ1dHRvbj5cXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogXFwnaW5mb1xcJywgYnRuVHlwZTogXFwnYVxcJywgdXJsOiBcXCd3d3cuYmFpZHUuY29tXFwnLCByb290UGF0aDogdHJ1ZSwgdGFyZ2V0OiBcXCdfYmxhbmtcXCdcIj5cXHU3RUREXFx1NUJGOVxcdThERUZcXHU1Rjg0XFx1NjI1M1xcdTVGMDBcXHU2NUIwXFx1NUYwMFxcdTk4NzU8L3ktYnV0dG9uPlxcbiAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgJ1xuICAgIH0sXG4gICAgbG9hZGluZzogX2tub2Nrb3V0Mi5kZWZhdWx0Lm9ic2VydmFibGUoZmFsc2UpLFxuICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICB2aWV3TW9kZWwubG9hZGluZyh0cnVlKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2aWV3TW9kZWwubG9hZGluZyhmYWxzZSk7XG4gICAgICB9LCAzMDAwKTtcbiAgICB9LFxuICAgIHdhaXQ6IGZ1bmN0aW9uIHdhaXQoKSB7fVxuICB9O1xuICBfa25vY2tvdXQyLmRlZmF1bHQuYXBwbHlCaW5kaW5ncyh2aWV3TW9kZWwsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHRlbXBsYXRlOiBfaW5kZXgyLmRlZmF1bHQsXG4gIGluaXQ6IGluaXRcbn07XG5cbi8qKiovIH0pLFxuLyogMTggKi8sXG4vKiAxOSAqLyxcbi8qIDIwICovLFxuLyogMjEgKi8sXG4vKiAyMiAqLyxcbi8qIDIzICovLFxuLyogMjQgKi8sXG4vKiAyNSAqLyxcbi8qIDI2ICovLFxuLyogMjcgKi8sXG4vKiAyOCAqLyxcbi8qIDI5ICovLFxuLyogMzAgKi8sXG4vKiAzMSAqLyxcbi8qIDMyICovLFxuLyogMzMgKi8sXG4vKiAzNCAqLyxcbi8qIDM1ICovLFxuLyogMzYgKi8sXG4vKiAzNyAqLyxcbi8qIDM4ICovLFxuLyogMzkgKi8sXG4vKiA0MCAqLyxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cbnZhciBfa25vY2tvdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX2tub2Nrb3V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tub2Nrb3V0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaW5pdChwYXJhbXMpIHtcbiAgdGhpcy5jb2RlID0gcGFyYW1zLmNvZGU7XG4gIHRoaXMuaXNTaG93QWxsID0gX2tub2Nrb3V0Mi5kZWZhdWx0Lm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzU2hvd0FsbCghdGhpcy5pc1Nob3dBbGwoKSk7XG4gIH0uYmluZCh0aGlzKTtcbn1cbl9rbm9ja291dDIuZGVmYXVsdC5jb21wb25lbnRzLnJlZ2lzdGVyKCdkZW1vJywge1xuICB2aWV3TW9kZWw6IGluaXQsXG4gIHRlbXBsYXRlOiBfaW5kZXgyLmRlZmF1bHRcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJkZW1vXFxcIj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tc2hvd1xcXCI+XFxyXFxuICA8IS0tIGtvIHRlbXBsYXRlOiB7IG5vZGVzOiAkY29tcG9uZW50VGVtcGxhdGVOb2RlcyB9IC0tPjwhLS0gL2tvIC0tPlxcclxcbiAgPC9kaXY+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJkZW1vLXNwbGl0XFxcIj48L2Rpdj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tY29kZVxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6eydkZW1vLWhpZGVDb2RlJzohaXNTaG93QWxsKCl9XFxcIj5cXHJcXG4gICAgPHktY29kZSBwYXJhbXM9XFxcImNvZGU6Y29kZVxcXCI+PC95LWNvZGU+XFxyXFxuICA8L2Rpdj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tdG9nZ2xlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOnRvZ2dsZVxcXCI+PHNwYW4gY2xhc3M9XFxcImZhXFxcIiBkYXRhLWJpbmQ9XFxcImNzczp7J2ZhLWFuZ2xlLWRvdWJsZS1kb3duJzohaXNTaG93QWxsKCksJ2ZhLWFuZ2xlLWRvdWJsZS11cCc6aXNTaG93QWxsKCl9XFxcIj48L3NwYW4+PC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cbi8qKiovIH0pLFxuLyogNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblxudmFyIF9rbm9ja291dCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfa25vY2tvdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa25vY2tvdXQpO1xuXG52YXIgX2hpZ2hsaWdodGpzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9oaWdobGlnaHRqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaWdobGlnaHRqcyk7XG5cbnZhciBfY2xpcGJvYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCk7XG5cbnZhciBfY2xpcGJvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsaXBib2FyZCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBpbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJ3V0aWwnXG5mdW5jdGlvbiBJbml0KHBhcmFtcywgZWwpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICAvLyDlj6rojrflj5bpq5jkuq7nmoRET03vvIzlkKbliJnkvJrlvbHlk41rb+aMh+S7pFxuICB0aGlzLiRlbCA9IGVsLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1szXTtcbiAgdGhpcy5jb2RlID0gcGFyYW1zLmNvZGU7XG4gIHRoaXMuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xpcGJvYXJkID0gbmV3IF9jbGlwYm9hcmQyLmRlZmF1bHQoJy5jb3B5Jywge1xuICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5jb2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICBjbGlwYm9hcmQuZGVzdHJveSgpO1xuICAgICAgd2luZG93LmFsZXJ0KCfku6PnoIHlt7LlpI3liLbliLDliarotLTmnb8nKTtcbiAgICB9KTtcbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgX2hpZ2hsaWdodGpzMi5kZWZhdWx0LmhpZ2hsaWdodEJsb2NrKF90aGlzLiRlbCk7XG4gIH0pO1xufVxuX2tub2Nrb3V0Mi5kZWZhdWx0LmNvbXBvbmVudHMucmVnaXN0ZXIoJ3ktY29kZScsIHtcbiAgdmlld01vZGVsOiB7XG4gICAgY3JlYXRlVmlld01vZGVsOiBmdW5jdGlvbiBjcmVhdGVWaWV3TW9kZWwocGFyYW1zLCBjb21wb25lbnRJbmZvKSB7XG4gICAgICByZXR1cm4gbmV3IEluaXQocGFyYW1zLCBjb21wb25lbnRJbmZvLmVsZW1lbnQpO1xuICAgIH1cbiAgfSxcbiAgdGVtcGxhdGU6IF9pbmRleDIuZGVmYXVsdFxufSk7XG5cbi8qKiovIH0pLFxuLyogNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImNvZGVcXFwiPlxcclxcbiAgPGRpdiBjbGFzcz1cXFwidG9vbHNcXFwiPlxcclxcbiAgICA8aSBjbGFzcz1cXFwiZmEgZmEtY2xpcGJvYXJkIGNvcHlcXFwiIGRhdGEtYmluZD1cXFwiY2xpY2s6IGNvcHlcXFwiPjwvaT5cXHJcXG4gIDwvZGl2PlxcclxcbiAgPHByZT48Y29kZSBjbGFzcz1cXFwiaHRtbFxcXCIgZGF0YS1iaW5kPVxcXCJ0ZXh0OiBjb2RlXFxcIj48L2NvZGU+PC9wcmU+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cbi8qKiovIH0pLFxuLyogNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG4vKiA0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFttb2R1bGUsIF9fd2VicGFja19yZXF1aXJlX18oNDkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKSwgX193ZWJwYWNrX3JlcXVpcmVfXyg1MildLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGZhY3RvcnkobW9kdWxlLCByZXF1aXJlKCcuL2NsaXBib2FyZC1hY3Rpb24nKSwgcmVxdWlyZSgndGlueS1lbWl0dGVyJyksIHJlcXVpcmUoJ2dvb2QtbGlzdGVuZXInKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1vZCA9IHtcbiAgICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uLCBnbG9iYWwudGlueUVtaXR0ZXIsIGdsb2JhbC5nb29kTGlzdGVuZXIpO1xuICAgICAgICBnbG9iYWwuY2xpcGJvYXJkID0gbW9kLmV4cG9ydHM7XG4gICAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX2NsaXBib2FyZEFjdGlvbiwgX3RpbnlFbWl0dGVyLCBfZ29vZExpc3RlbmVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9jbGlwYm9hcmRBY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkQWN0aW9uKTtcblxuICAgIHZhciBfdGlueUVtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGlueUVtaXR0ZXIpO1xuXG4gICAgdmFyIF9nb29kTGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ29vZExpc3RlbmVyKTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gICAgfVxuXG4gICAgdmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfRW1pdHRlcikge1xuICAgICAgICBfaW5oZXJpdHMoQ2xpcGJvYXJkLCBfRW1pdHRlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0cmlnZ2VyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmQodHJpZ2dlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDbGlwYm9hcmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDbGlwYm9hcmQpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICBfdGhpcy5saXN0ZW5DbGljayh0cmlnZ2VyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGlmIGF0dHJpYnV0ZXMgd291bGQgYmUgcmVzb2x2ZWQgdXNpbmcgaW50ZXJuYWwgc2V0dGVyIGZ1bmN0aW9uc1xuICAgICAgICAgKiBvciBjdXN0b20gZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmQsIFt7XG4gICAgICAgICAgICBrZXk6ICdyZXNvbHZlT3B0aW9ucycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5hY3Rpb24gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmFjdGlvbiA6IHRoaXMuZGVmYXVsdEFjdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHR5cGVvZiBvcHRpb25zLnRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMudGFyZ2V0IDogdGhpcy5kZWZhdWx0VGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHR5cGVvZiBvcHRpb25zLnRleHQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnRleHQgOiB0aGlzLmRlZmF1bHRUZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gX3R5cGVvZihvcHRpb25zLmNvbnRhaW5lcikgPT09ICdvYmplY3QnID8gb3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdsaXN0ZW5DbGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuQ2xpY2sodHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9ICgwLCBfZ29vZExpc3RlbmVyMi5kZWZhdWx0KSh0cmlnZ2VyLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ29uQ2xpY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gZS5kZWxlZ2F0ZVRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbmV3IF9jbGlwYm9hcmRBY3Rpb24yLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuYWN0aW9uKHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0KHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQodHJpZ2dlciksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdEFjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCdhY3Rpb24nLCB0cmlnZ2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdFRhcmdldCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gZ2V0QXR0cmlidXRlVmFsdWUoJ3RhcmdldCcsIHRyaWdnZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHRUZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCd0ZXh0JywgdHJpZ2dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSwgW3tcbiAgICAgICAgICAgIGtleTogJ2lzU3VwcG9ydGVkJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2NvcHknLCAnY3V0J107XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnID8gW2FjdGlvbl0gOiBhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIHN1cHBvcnQgPSAhIWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZDtcblxuICAgICAgICAgICAgICAgIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgPSBzdXBwb3J0ICYmICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBDbGlwYm9hcmQ7XG4gICAgfShfdGlueUVtaXR0ZXIyLmRlZmF1bHQpO1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VmZml4XG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QXR0cmlidXRlVmFsdWUoc3VmZml4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSAnZGF0YS1jbGlwYm9hcmQtJyArIHN1ZmZpeDtcblxuICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkO1xufSk7XG5cbi8qKiovIH0pLFxuLyogNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHJ1ZSkge1xuICAgICAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbbW9kdWxlLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZmFjdG9yeShtb2R1bGUsIHJlcXVpcmUoJ3NlbGVjdCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbW9kID0ge1xuICAgICAgICAgICAgZXhwb3J0czoge31cbiAgICAgICAgfTtcbiAgICAgICAgZmFjdG9yeShtb2QsIGdsb2JhbC5zZWxlY3QpO1xuICAgICAgICBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uID0gbW9kLmV4cG9ydHM7XG4gICAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX3NlbGVjdCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBfc2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdCk7XG5cbiAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgICAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgICAgICB9O1xuICAgIH0oKTtcblxuICAgIHZhciBDbGlwYm9hcmRBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gQ2xpcGJvYXJkQWN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmRBY3Rpb24pO1xuXG4gICAgICAgICAgICB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5pbml0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyBiYXNlIHByb3BlcnRpZXMgcGFzc2VkIGZyb20gY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKENsaXBib2FyZEFjdGlvbiwgW3tcbiAgICAgICAgICAgIGtleTogJ3Jlc29sdmVPcHRpb25zJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlT3B0aW9ucygpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gb3B0aW9ucy5lbWl0dGVyO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gb3B0aW9ucy50ZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlcjtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2luaXRTZWxlY3Rpb24nLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEZha2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzZWxlY3RGYWtlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RGYWtlKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXNSVEwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKSA9PSAncnRsJztcblxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRmFrZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlRmFrZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlciA9IHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKSB8fCB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB6b29taW5nIG9uIGlPU1xuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuZm9udFNpemUgPSAnMTJwdCc7XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgYm94IG1vZGVsXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5ib3JkZXIgPSAnMCc7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgZWxlbWVudCBvdXQgb2Ygc2NyZWVuIGhvcml6b250YWxseVxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGVbaXNSVEwgPyAncmlnaHQnIDogJ2xlZnQnXSA9ICctOTk5OXB4JztcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIGVsZW1lbnQgdG8gdGhlIHNhbWUgcG9zaXRpb24gdmVydGljYWxseVxuICAgICAgICAgICAgICAgIHZhciB5UG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLnRvcCA9IHlQb3NpdGlvbiArICdweCc7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS52YWx1ZSA9IHRoaXMudGV4dDtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZmFrZUVsZW0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAoMCwgX3NlbGVjdDIuZGVmYXVsdCkodGhpcy5mYWtlRWxlbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdyZW1vdmVGYWtlJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVGYWtlKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZha2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFrZUhhbmRsZXJDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5mYWtlRWxlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnc2VsZWN0VGFyZ2V0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3RUYXJnZXQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAoMCwgX3NlbGVjdDIuZGVmYXVsdCkodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29weVRleHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnY29weVRleHQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvcHlUZXh0KCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZWVkZWQgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZWVkZWQgPSBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmFjdGlvbik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzdWx0KHN1Y2NlZWRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2hhbmRsZVJlc3VsdCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlUmVzdWx0KHN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KHN1Y2NlZWRlZCA/ICdzdWNjZXNzJyA6ICdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5zZWxlY3RlZFRleHQsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRoaXMudHJpZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb246IHRoaXMuY2xlYXJTZWxlY3Rpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdjbGVhclNlbGVjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGYWtlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2FjdGlvbicsXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnY29weSc7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uICE9PSAnY29weScgJiYgdGhpcy5fYWN0aW9uICE9PSAnY3V0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJhY3Rpb25cIiB2YWx1ZSwgdXNlIGVpdGhlciBcImNvcHlcIiBvciBcImN1dFwiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3RhcmdldCcsXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiAodHlwZW9mIHRhcmdldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGFyZ2V0KSkgPT09ICdvYmplY3QnICYmIHRhcmdldC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAnY29weScgJiYgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gUGxlYXNlIHVzZSBcInJlYWRvbmx5XCIgaW5zdGVhZCBvZiBcImRpc2FibGVkXCIgYXR0cmlidXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2N1dCcgJiYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykgfHwgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiBhdHRyaWJ1dGUuIFlvdSBjYW5cXCd0IGN1dCB0ZXh0IGZyb20gZWxlbWVudHMgd2l0aCBcInJlYWRvbmx5XCIgb3IgXCJkaXNhYmxlZFwiIGF0dHJpYnV0ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwidGFyZ2V0XCIgdmFsdWUsIHVzZSBhIHZhbGlkIEVsZW1lbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIENsaXBib2FyZEFjdGlvbjtcbiAgICB9KCk7XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IENsaXBib2FyZEFjdGlvbjtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIHNlbGVjdChlbGVtZW50KSB7XG4gICAgdmFyIHNlbGVjdGVkVGV4dDtcblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHZhciBpc1JlYWRPbmx5ID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5Jyk7XG5cbiAgICAgICAgaWYgKCFpc1JlYWRPbmx5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGVsZW1lbnQudmFsdWUubGVuZ3RoKTtcblxuICAgICAgICBpZiAoIWlzUmVhZE9ubHkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGVkVGV4dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZWxlY3Q7XG5cblxuLyoqKi8gfSksXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBFICgpIHtcbiAgLy8gS2VlcCB0aGlzIGVtcHR5IHNvIGl0J3MgZWFzaWVyIHRvIGluaGVyaXQgZnJvbVxuICAvLyAodmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9saXBzbWFjayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvaXNzdWVzLzMpXG59XG5cbkUucHJvdG90eXBlID0ge1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4OiBjdHhcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyICgpIHtcbiAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrXG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgbGlzdGVuZXIsIGN0eCk7XG4gIH0sXG5cbiAgZW1pdDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGF0YSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZXZ0QXJyID0gKCh0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KSlbbmFtZV0gfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBldnRBcnIubGVuZ3RoO1xuXG4gICAgZm9yIChpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGV2dEFycltpXS5mbi5hcHBseShldnRBcnJbaV0uY3R4LCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvZmY6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG4gICAgdmFyIGV2dHMgPSBlW25hbWVdO1xuICAgIHZhciBsaXZlRXZlbnRzID0gW107XG5cbiAgICBpZiAoZXZ0cyAmJiBjYWxsYmFjaykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgbGl2ZUV2ZW50cy5wdXNoKGV2dHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBldmVudCBmcm9tIHF1ZXVlIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICAvLyBTdWdnZXN0ZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2xhemRcbiAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvY29tbWl0L2M2ZWJmYWE5YmM5NzNiMzNkMTEwYTg0YTMwNzc0MmI3Y2Y5NGM5NTMjY29tbWl0Y29tbWVudC01MDI0OTEwXG5cbiAgICAobGl2ZUV2ZW50cy5sZW5ndGgpXG4gICAgICA/IGVbbmFtZV0gPSBsaXZlRXZlbnRzXG4gICAgICA6IGRlbGV0ZSBlW25hbWVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRTtcblxuXG4vKioqLyB9KSxcbi8qIDUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpcyA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpO1xudmFyIGRlbGVnYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NCk7XG5cbi8qKlxuICogVmFsaWRhdGVzIGFsbCBwYXJhbXMgYW5kIGNhbGxzIHRoZSByaWdodFxuICogbGlzdGVuZXIgZnVuY3Rpb24gYmFzZWQgb24gaXRzIHRhcmdldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmICghdGFyZ2V0ICYmICF0eXBlICYmICFjYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBTdHJpbmcnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzLmZuKGNhbGxiYWNrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlyZCBhcmd1bWVudCBtdXN0IGJlIGEgRnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoaXMubm9kZSh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5Ob2RlKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChpcy5ub2RlTGlzdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5Ob2RlTGlzdCh0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXMuc3RyaW5nKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlblNlbGVjdG9yKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIFN0cmluZywgSFRNTEVsZW1lbnQsIEhUTUxDb2xsZWN0aW9uLCBvciBOb2RlTGlzdCcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgSFRNTCBlbGVtZW50XG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTm9kZShub2RlLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgbGlzdCBvZiBIVE1MIGVsZW1lbnRzXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge05vZGVMaXN0fEhUTUxDb2xsZWN0aW9ufSBub2RlTGlzdFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbk5vZGVMaXN0KG5vZGVMaXN0LCB0eXBlLCBjYWxsYmFjaykge1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBzZWxlY3RvclxuICogYW5kIHJldHVybnMgYSByZW1vdmUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuU2VsZWN0b3Ioc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGRlbGVnYXRlKGRvY3VtZW50LmJvZHksIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdGVuO1xuXG5cbi8qKiovIH0pLFxuLyogNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIEhUTUwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMubm9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBsaXN0IG9mIEhUTUwgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLm5vZGVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiAodHlwZSA9PT0gJ1tvYmplY3QgTm9kZUxpc3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nKVxuICAgICAgICAmJiAoJ2xlbmd0aCcgaW4gdmFsdWUpXG4gICAgICAgICYmICh2YWx1ZS5sZW5ndGggPT09IDAgfHwgZXhwb3J0cy5ub2RlKHZhbHVlWzBdKSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5zdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5mbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNsb3Nlc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZXZlbnQgdG8gYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gX2RlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIHZhciBsaXN0ZW5lckZuID0gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCB1c2VDYXB0dXJlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIERlbGVnYXRlcyBldmVudCB0byBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd8QXJyYXl9IFtlbGVtZW50c11cbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZGVsZWdhdGUoZWxlbWVudHMsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIC8vIEhhbmRsZSB0aGUgcmVndWxhciBFbGVtZW50IHVzYWdlXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cy5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBfZGVsZWdhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgRWxlbWVudC1sZXNzIHVzYWdlLCBpdCBkZWZhdWx0cyB0byBnbG9iYWwgZGVsZWdhdGlvblxuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBVc2UgYGRvY3VtZW50YCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLCB0aGVuIGFwcGx5IGFyZ3VtZW50c1xuICAgICAgICAvLyBUaGlzIGlzIGEgc2hvcnQgd2F5IHRvIC51bnNoaWZ0IGBhcmd1bWVudHNgIHdpdGhvdXQgcnVubmluZyBpbnRvIGRlb3B0aW1pemF0aW9uc1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlLmJpbmQobnVsbCwgZG9jdW1lbnQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIFNlbGVjdG9yLWJhc2VkIHVzYWdlXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgQXJyYXktbGlrZSBiYXNlZCB1c2FnZVxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBfZGVsZWdhdGUoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBGaW5kcyBjbG9zZXN0IG1hdGNoIGFuZCBpbnZva2VzIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBsaXN0ZW5lcihlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICBlLmRlbGVnYXRlVGFyZ2V0ID0gY2xvc2VzdChlLnRhcmdldCwgc2VsZWN0b3IpO1xuXG4gICAgICAgIGlmIChlLmRlbGVnYXRlVGFyZ2V0KSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKGVsZW1lbnQsIGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlbGVnYXRlO1xuXG5cbi8qKiovIH0pLFxuLyogNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIERPQ1VNRU5UX05PREVfVFlQRSA9IDk7XG5cbi8qKlxuICogQSBwb2x5ZmlsbCBmb3IgRWxlbWVudC5tYXRjaGVzKClcbiAqL1xuaWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8ubWF0Y2hlcyA9IHByb3RvLm1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ubXNNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcGFyZW50IHRoYXQgbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdCAoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSBET0NVTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Lm1hdGNoZXMgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9zZXN0O1xuXG5cbi8qKiovIH0pLFxuLyogNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG4vKiA1NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgpO1xuXG52YXIgX2tub2Nrb3V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9rbm9ja291dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rbm9ja291dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGluaXQocGFyYW1zKSB7XG4gIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lIHx8ICcnO1xuICB0aGlzLmxpbmsgPSBwYXJhbXMubGluayB8fCAnJztcbn1cbl9rbm9ja291dDIuZGVmYXVsdC5jb21wb25lbnRzLnJlZ2lzdGVyKCd5LXRpdGxlJywge1xuICB2aWV3TW9kZWw6IGluaXQsXG4gIHRlbXBsYXRlOiBfaW5kZXgyLmRlZmF1bHRcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8aDE+XFxyXFxuICA8c3BhbiBkYXRhLWJpbmQ9XFxcInRleHQ6IG5hbWVcXFwiPjwvc3Bhbj7nu4Tku7ZcXHJcXG48L2gxPlxcclxcbjwhLS0ga28gaWY6IGxpbmstLT5cXHJcXG48aDI+XFxyXFxuICA8YSBkYXRhLWJpbmQ9XFxcImF0dHI6IHtocmVmOiBsaW5rfVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHN0eWxlPVxcXCJjb2xvcjogIzJiYWVlOVxcXCI+XFxyXFxuICAgIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogbmFtZVxcXCI+PC9zcGFuPue7hOS7tkFQSeaWh+aho1xcclxcbiAgPC9hPlxcclxcbjwvaDI+XFxyXFxuPCEtLSAva28gLS0+XFxyXFxuPGgyPuS7o+eggeekuuS+izwvaDI+XFxyXFxuXCI7XG5cbi8qKiovIH0pLFxuLyogNTkgKi8sXG4vKiA2MCAqLyxcbi8qIDYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJ5LWJveFxcXCI+XFxyXFxuICA8eS10aXRsZSBwYXJhbXM9XFxcIm5hbWU6ICdCdXR0b27mjInpkq4nLCBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL3lvbnlvdXljL2Jsb2cvaXNzdWVzLzM2J1xcXCI+PC95LXRpdGxlPlxcclxcbiAgPGRlbW8gcGFyYW1zPVxcXCJjb2RlOmNvZGUudHlwZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtdG9wXFxcIj5cXHJcXG4gICAgICA8eS1idXR0b24+RGVmYXVsdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3ByaW1hcnknXFxcIj5QcmltYXJ5PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnZ2hvc3QnXFxcIj5HaG9zdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2Rhc2hlZCdcXFwiPkRhc2hlZDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3RleHQnXFxcIj5UZXh0PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8aHIgY2xhc3M9XFxcImhyLWZpeFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2luZm8nXFxcIj5JbmZvPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnc3VjY2VzcydcXFwiPlN1Y2Nlc3M8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICd3YXJuaW5nJ1xcXCI+V2FybmluZzwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2Vycm9yJ1xcXCI+RXJyb3I8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+5Z+656GA55So5rOVPC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOaMiemSruexu+Wei+acie+8mum7mOiupOaMiemSruOAgeS4u+aMiemSruOAgeW5veeBteaMiemSruOAgeiZmue6v+aMiemSruOAgeaWh+Wtl+aMiemSruS7peWPiuWbm+enjeminOiJsuaMiemSruOAglxcclxcbiAgICAgIOmAmui/h+iuvue9rjxjb2RlPnR5cGU8L2NvZGU+5Li6PGNvZGU+cHJpbWFyeTwvY29kZT7jgIE8Y29kZT5naG9zdDwvY29kZT7jgIE8Y29kZT5kYXNoZWQ8L2NvZGU+44CBPGNvZGU+dGV4dDwvY29kZT7jgIE8Y29kZT5pbmZvPC9jb2RlPuOAgTxjb2RlPnN1Y2Nlc3M8L2NvZGU+44CBPGNvZGU+d2FybmluZzwvY29kZT7jgIE8Y29kZT5lcnJvcjwvY29kZT7liJvlu7rkuI3lkIzmoLflvI/nmoTmjInpkq7vvIzkuI3orr7nva7kuLrpu5jorqTmoLflvI/jgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS5zaGFwZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtdG9wXFxcIj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnd2FybmluZycsIHNoYXBlOiAnY2lyY2xlJ1xcXCI+MC4wPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnd2FybmluZydcXFwiPjAuMDwveS1idXR0b24+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXNwbGl0XFxcIj5cXHJcXG4gICAgICA8c3Bhbj7mjInpkq7lvaLnirY8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H6K6+572uPGNvZGU+c2hhcGU8L2NvZGU+5bGe5oCn5Li6PGNvZGU+Y2lyY2xlPC9jb2RlPu+8jOWPr+WwhuaMiemSrue9ruS4uuWchueahOW9oueKtuOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLnNpemVcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2l6ZTogJ2xhcmdlJ1xcXCI+TGFyZ2U8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdnaG9zdCdcXFwiPkRlZmF1bHQ8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdnaG9zdCcsIHNpemU6ICdzbWFsbCdcXFwiPlNtYWxsPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8aHIgY2xhc3M9XFxcImhyLWZpeFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2hhcGU6ICdjaXJjbGUnLCBzaXplOiAnbGFyZ2UnXFxcIj5MYXJnZTwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2hhcGU6ICdjaXJjbGUnXFxcIj5EZWZhdWx0PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnZ2hvc3QnLCBzaGFwZTogJ2NpcmNsZScsIHNpemU6ICdzbWFsbCdcXFwiPlNtYWxsPC95LWJ1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtc3BsaXRcXFwiPlxcclxcbiAgICAgIDxzcGFuPuaMiemSruWwuuWvuDwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtYm90dG9tXFxcIj5cXHJcXG4gICAgICDmjInpkq7mnInkuInnp43lsLrlr7jvvJrlpKfjgIHpu5jorqTvvIjkuK3vvInjgIHlsI9cXHJcXG4gICAgICDpgJrov4forr7nva48Y29kZT5zaXplPC9jb2RlPuS4ujxjb2RlPmxhcmdlPC9jb2RlPuWSjDxjb2RlPnNtYWxsPC9jb2RlPuWwhuaMiemSruiuvue9ruS4uuWkp+WSjOWwj+WwuuWvuO+8jOS4jeiuvue9ruS4uum7mOiupO+8iOS4re+8ieWwuuWvuOOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLmRpc2FibGVkXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS10b3BcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdwcmltYXJ5J1xcXCI+RGVmYXVsdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3ByaW1hcnknLCBkaXNhYmxlZDogdHJ1ZVxcXCI+RGVmYXVsdChEaXNhYmxlZCk8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+5LiN5Y+v55So54q25oCBPC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOmAmui/h+a3u+WKoDxjb2RlPmRpc2FibGVkPC9jb2RlPuWxnuaAp+WPr+WwhuaMiemSruiuvue9ruS4uuS4jeWPr+eUqOeKtuaAgeOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLmxvYWRpbmdcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3N1Y2Nlc3MnXFxcIj5TdWNjZXNzPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnc3VjY2VzcycsIGNsaWNrOiAkcGFyZW50LmxvYWQsIGxvYWRpbmc6ICRwYXJlbnQubG9hZGluZ1xcXCI+TG9hZGluZzwveS1idXR0b24+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXNwbGl0XFxcIj5cXHJcXG4gICAgICA8c3Bhbj7liqDovb3kuK3nirbmgIE8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H5re75YqgPGNvZGU+bG9hZGluZzwvY29kZT7lsZ7mgKflj6/ku6XorqnmjInpkq7lpITkuo7liqDovb3kuK3nirbmgIHvvIzlkI7kuKTkuKrmjInpkq7lnKjngrnlh7vml7bov5vlhaXliqDovb3nirbmgIHjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS53YWl0XFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS10b3BcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdlcnJvcicsIGNsaWNrOiAkcGFyZW50LndhaXRcXFwiPkRlZmF1bHQ8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdlcnJvcicsIGNsaWNrOiAkcGFyZW50LndhaXQsIHdhaXQ6IDMwMDBcXFwiPndhaXQ8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+6K6+572u562J5b6F5pe26Ze0PC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOmAmui/h+a3u+WKoDxjb2RlPndhaXQ8L2NvZGU+5bGe5oCn5Li6PGNvZGU+buavq+enkuaVsDwvY29kZT7vvIzlj6/ku6XorqnmjInpkq7lpITkuo7kuI3lj6/ngrnlh7vnirbmgIHvvIzpmLLmraLlv6vpgJ/ngrnlh7vlpJrmrKHop6blj5Hkuovku7bjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS5idG5UeXBlX2FcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2luZm8nLCBidG5UeXBlOiAnYScsIHVybDogJ3d3dy5iYWlkdS5jb20nXFxcIj7nm7jlr7not6/lvoTmnKzpobXot7Povaw8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgcm9vdFBhdGg6IHRydWVcXFwiPue7neWvuei3r+W+hOacrOmhtei3s+i9rDwveS1idXR0b24+XFxyXFxuICAgICAgPGhyIGNsYXNzPVxcXCJoci1maXhcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgdGFyZ2V0OiAnX2JsYW5rJ1xcXCI+55u45a+56Lev5b6E5omT5byA5paw5byA6aG1PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnaW5mbycsIGJ0blR5cGU6ICdhJywgdXJsOiAnd3d3LmJhaWR1LmNvbScsIHJvb3RQYXRoOiB0cnVlLCB0YXJnZXQ6ICdfYmxhbmsnXFxcIj7nu53lr7not6/lvoTmiZPlvIDmlrDlvIDpobU8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+YnRuVHlwZeiuvue9ruS4umHml7Y8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H6K6+572uPGNvZGU+YnRuVHlwZTwvY29kZT7kuLo8Y29kZT5hPC9jb2RlPu+8jOa3u+WKoDxjb2RlPnVybDwvY29kZT7kuLo8Y29kZT7nm67moId1cmw8L2NvZGU+77yM5re75YqgPGNvZGU+cm9vdFBhdGg8L2NvZGU+5Li6PGNvZGU+ZmFsc2UvdHJ1ZSjpu5jorqTkuLpmYWxzZSk8L2NvZGU+5o6n5Yi25pys6aG16Lez6L2s5oiW6ICF5paw6aG16Z2i5omT5byA77yMPGNvZGU+dGFyZ2V0PC9jb2RlPuS4jmHnmoR0YXJnZXTkv53mjIHkuIDoh7TvvIzop4TlrprlnKjkvZXlpITmiZPlvIDpk77mjqXmlofmoaPjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cbi8qKiovIH0pXG5dKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbGlicy4yMi40NGFjN2I3YjFmNTJmNTc0YjI4ZS5qcyIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2luZGV4Lmh0bWwnXHJcbmltcG9ydCBrbyBmcm9tICdrbm9ja291dCdcclxuaW1wb3J0ICdAL2NvbXBvbmVudHMnXHJcbmZ1bmN0aW9uIGluaXQgKCkge1xyXG4gIHZhciB2aWV3TW9kZWwgPSB7XHJcbiAgICBjb2RlOiB7XHJcbiAgICAgIHR5cGU6IGBcclxuICAgICAgPHRlbXBsYXRlPlxyXG4gICAgICAgIDx5LWJ1dHRvbj5EZWZhdWx0PC95LWJ1dHRvbj5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3ByaW1hcnknLCBzaXplOiAnbGFyZ2UnXCI+UHJpbWFyeTwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdnaG9zdCcsIHNpemU6ICdsYXJnZSdcIj5HaG9zdDwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdkYXNoZWQnXCI+RGFzaGVkPC95LWJ1dHRvbj5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3RleHQnXCI+VGV4dDwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdpbmZvJ1wiPkluZm88L3ktYnV0dG9uPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnc3VjY2VzcydcIj5TdWNjZXNzPC95LWJ1dHRvbj5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3dhcm5pbmcnXCI+V2FybmluZzwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdlcnJvcidcIj5FcnJvcjwveS1idXR0b24+XHJcbiAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgIGAsXHJcbiAgICAgIHNoYXBlOiBgXHJcbiAgICAgIDx0ZW1wbGF0ZT5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3dhcm5pbmcnLCBzaGFwZTogJ2NpcmNsZSdcIj4wLjA8L3ktYnV0dG9uPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnd2FybmluZydcIj4wLjA8L3ktYnV0dG9uPlxyXG4gICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICBgLFxyXG4gICAgICBzaXplOiBgXHJcbiAgICAgIDx0ZW1wbGF0ZT5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ2dob3N0Jywgc2l6ZTogJ2xhcmdlJ1wiPkxhcmdlPC95LWJ1dHRvbj5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ2dob3N0J1wiPkRlZmF1bHQ8L3ktYnV0dG9uPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnZ2hvc3QnLCBzaXplOiAnc21hbGwnXCI+U21hbGw8L3ktYnV0dG9uPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnZ2hvc3QnLCBzaGFwZTogJ2NpcmNsZScsIHNpemU6ICdsYXJnZSdcIj5MYXJnZTwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdnaG9zdCcsIHNoYXBlOiAnY2lyY2xlJ1wiPkRlZmF1bHQ8L3ktYnV0dG9uPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnZ2hvc3QnLCBzaGFwZTogJ2NpcmNsZScsIHNpemU6ICdzbWFsbCdcIj5TbWFsbDwveS1idXR0b24+XHJcbiAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgIGAsXHJcbiAgICAgIGRpc2FibGVkOiBgXHJcbiAgICAgIDx0ZW1wbGF0ZT5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3ByaW1hcnknXCI+RGVmYXVsdDwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdwcmltYXJ5JywgZGlzYWJsZWQ6IHRydWVcIj5EZWZhdWx0KERpc2FibGVkKTwveS1idXR0b24+XHJcbiAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgIGAsXHJcbiAgICAgIGxvYWRpbmc6IGBcclxuICAgICAgPHRlbXBsYXRlPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnc3VjY2VzcydcIj5TdWNjZXNzPC95LWJ1dHRvbj5cclxuICAgICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ3N1Y2Nlc3MnLCBjbGljazogJHBhcmVudC5sb2FkLCBsb2FkaW5nOiAkcGFyZW50LmxvYWRpbmdcIj5Mb2FkaW5nPC95LWJ1dHRvbj5cclxuICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgPHNjcmlwdD5cclxuICAgICAgICB2YXIgdmlld21vZGVsID0ge1xyXG4gICAgICAgICAgbG9hZGluZzoga28ub2JzZXJ2YWJsZShmYWxzZSksXHJcbiAgICAgICAgICBsb2FkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZpZXdNb2RlbC5sb2FkaW5nKHRydWUpXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHZpZXdNb2RlbC5sb2FkaW5nKGZhbHNlKVxyXG4gICAgICAgICAgICB9LCAzMDAwKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgIGAsXHJcbiAgICAgIHdhaXQ6IGBcclxuICAgICAgPHRlbXBsYXRlPlxyXG4gICAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XCJ0eXBlOiAnZXJyb3InLCBjbGljazogJHBhcmVudC53YWl0XCI+RGVmYXVsdDwveS1idXR0b24+XHJcbiAgICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdlcnJvcicsIGNsaWNrOiAkcGFyZW50LndhaXQsIHdhaXQ6IDMwMDBcIj53YWl0PC95LWJ1dHRvbj5cclxuICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgPHNjcmlwdD5cclxuICAgICAgICB3YWl0OiAoKSA9PiB7fVxyXG4gICAgICA8c2NyaXB0PlxyXG4gICAgICBgLFxyXG4gICAgICBidG5UeXBlX2E6IGBcclxuICAgICAgPHRlbXBsYXRlPlxyXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ2luZm8nLCBidG5UeXBlOiAnYScsIHVybDogJ3d3dy5iYWlkdS5jb20nXCI+55u45a+56Lev5b6E5pys6aG16Lez6L2sPC95LWJ1dHRvbj5cclxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgcm9vdFBhdGg6IHRydWVcIj7nu53lr7not6/lvoTmnKzpobXot7Povaw8L3ktYnV0dG9uPlxyXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVwidHlwZTogJ2luZm8nLCBidG5UeXBlOiAnYScsIHVybDogJ3d3dy5iYWlkdS5jb20nLCB0YXJnZXQ6ICdfYmxhbmsnXCI+55u45a+56Lev5b6E5omT5byA5paw5byA6aG1PC95LWJ1dHRvbj5cclxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgcm9vdFBhdGg6IHRydWUsIHRhcmdldDogJ19ibGFuaydcIj7nu53lr7not6/lvoTmiZPlvIDmlrDlvIDpobU8L3ktYnV0dG9uPlxyXG4gICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICBgXHJcbiAgICB9LFxyXG4gICAgbG9hZGluZzoga28ub2JzZXJ2YWJsZShmYWxzZSksXHJcbiAgICBsb2FkOiAoKSA9PiB7XHJcbiAgICAgIHZpZXdNb2RlbC5sb2FkaW5nKHRydWUpXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHZpZXdNb2RlbC5sb2FkaW5nKGZhbHNlKVxyXG4gICAgICB9LCAzMDAwKVxyXG4gICAgfSxcclxuICAgIHdhaXQ6ICgpID0+IHt9XHJcbiAgfVxyXG4gIGtvLmFwcGx5QmluZGluZ3Modmlld01vZGVsLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHRlbXBsYXRlLFxyXG4gIGluaXRcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdmlld3MvYnV0dG9uL2luZGV4LmpzIiwiaW1wb3J0ICcuL2RlbW8nXHJcbmltcG9ydCAnLi90aXRsZSdcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvaW5kZXguanMiLCJpbXBvcnQgdHBsIGZyb20gJy4vaW5kZXguaHRtbCdcclxuaW1wb3J0ICcuL2luZGV4Lmxlc3MnXHJcbmltcG9ydCAnLi4vY29kZSdcclxuaW1wb3J0IGtvIGZyb20gJ2tub2Nrb3V0J1xyXG5mdW5jdGlvbiBpbml0IChwYXJhbXMpIHtcclxuICB0aGlzLmNvZGUgPSBwYXJhbXMuY29kZVxyXG4gIHRoaXMuaXNTaG93QWxsID0ga28ub2JzZXJ2YWJsZShmYWxzZSlcclxuICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuaXNTaG93QWxsKCF0aGlzLmlzU2hvd0FsbCgpKVxyXG4gIH0uYmluZCh0aGlzKVxyXG59XHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2RlbW8nLCB7XHJcbiAgdmlld01vZGVsOiBpbml0LFxyXG4gIHRlbXBsYXRlOiB0cGxcclxufSlcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvZGVtby9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJkZW1vXFxcIj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tc2hvd1xcXCI+XFxyXFxuICA8IS0tIGtvIHRlbXBsYXRlOiB7IG5vZGVzOiAkY29tcG9uZW50VGVtcGxhdGVOb2RlcyB9IC0tPjwhLS0gL2tvIC0tPlxcclxcbiAgPC9kaXY+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJkZW1vLXNwbGl0XFxcIj48L2Rpdj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tY29kZVxcXCIgZGF0YS1iaW5kPVxcXCJjc3M6eydkZW1vLWhpZGVDb2RlJzohaXNTaG93QWxsKCl9XFxcIj5cXHJcXG4gICAgPHktY29kZSBwYXJhbXM9XFxcImNvZGU6Y29kZVxcXCI+PC95LWNvZGU+XFxyXFxuICA8L2Rpdj5cXHJcXG4gIDxkaXYgY2xhc3M9XFxcImRlbW8tdG9nZ2xlXFxcIiBkYXRhLWJpbmQ9XFxcImNsaWNrOnRvZ2dsZVxcXCI+PHNwYW4gY2xhc3M9XFxcImZhXFxcIiBkYXRhLWJpbmQ9XFxcImNzczp7J2ZhLWFuZ2xlLWRvdWJsZS1kb3duJzohaXNTaG93QWxsKCksJ2ZhLWFuZ2xlLWRvdWJsZS11cCc6aXNTaG93QWxsKCl9XFxcIj48L3NwYW4+PC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9kZW1vL2luZGV4Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsImltcG9ydCB0cGwgZnJvbSAnLi9pbmRleC5odG1sJ1xyXG5pbXBvcnQgJy4vaW5kZXgubGVzcydcclxuaW1wb3J0IGtvIGZyb20gJ2tub2Nrb3V0J1xyXG5pbXBvcnQgaGxqcyBmcm9tICdoaWdobGlnaHRqcydcclxuaW1wb3J0IENsaXBib2FyZCBmcm9tICdjbGlwYm9hcmQnXHJcbmltcG9ydCAnaGlnaGxpZ2h0anMvc3R5bGVzL2dpdGh1Yi5jc3MnXHJcbi8vIGltcG9ydCB7IGRlYnVnIH0gZnJvbSAndXRpbCdcclxuZnVuY3Rpb24gSW5pdCAocGFyYW1zLCBlbCkge1xyXG4gIC8vIOWPquiOt+WPlumrmOS6rueahERPTe+8jOWQpuWImeS8muW9seWTjWtv5oyH5LukXHJcbiAgdGhpcy4kZWwgPSBlbC5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbM11cclxuICB0aGlzLmNvZGUgPSBwYXJhbXMuY29kZVxyXG4gIHRoaXMuY29weSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJy5jb3B5Jywge1xyXG4gICAgICB0ZXh0ICgpIHtcclxuICAgICAgICByZXR1cm4gcGFyYW1zLmNvZGVcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIChlKSA9PiB7XHJcbiAgICAgIGUuY2xlYXJTZWxlY3Rpb24oKVxyXG4gICAgICBjbGlwYm9hcmQuZGVzdHJveSgpXHJcbiAgICAgIHdpbmRvdy5hbGVydCgn5Luj56CB5bey5aSN5Yi25Yiw5Ymq6LS05p2/JylcclxuICAgIH0pXHJcbiAgfVxyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgaGxqcy5oaWdobGlnaHRCbG9jayh0aGlzLiRlbClcclxuICB9KVxyXG59XHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ3ktY29kZScsIHtcclxuICB2aWV3TW9kZWw6IHtcclxuICAgIGNyZWF0ZVZpZXdNb2RlbDogZnVuY3Rpb24gKHBhcmFtcywgY29tcG9uZW50SW5mbykge1xyXG4gICAgICByZXR1cm4gbmV3IEluaXQocGFyYW1zLCBjb21wb25lbnRJbmZvLmVsZW1lbnQpXHJcbiAgICB9XHJcbiAgfSxcclxuICB0ZW1wbGF0ZTogdHBsXHJcbn0pXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2NvZGUvaW5kZXguanMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiY29kZVxcXCI+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJ0b29sc1xcXCI+XFxyXFxuICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1jbGlwYm9hcmQgY29weVxcXCIgZGF0YS1iaW5kPVxcXCJjbGljazogY29weVxcXCI+PC9pPlxcclxcbiAgPC9kaXY+XFxyXFxuICA8cHJlPjxjb2RlIGNsYXNzPVxcXCJodG1sXFxcIiBkYXRhLWJpbmQ9XFxcInRleHQ6IGNvZGVcXFwiPjwvY29kZT48L3ByZT5cXHJcXG48L2Rpdj5cXHJcXG5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL2NvZGUvaW5kZXguaHRtbFxuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnbW9kdWxlJywgJy4vY2xpcGJvYXJkLWFjdGlvbicsICd0aW55LWVtaXR0ZXInLCAnZ29vZC1saXN0ZW5lciddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGZhY3RvcnkobW9kdWxlLCByZXF1aXJlKCcuL2NsaXBib2FyZC1hY3Rpb24nKSwgcmVxdWlyZSgndGlueS1lbWl0dGVyJyksIHJlcXVpcmUoJ2dvb2QtbGlzdGVuZXInKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1vZCA9IHtcbiAgICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uLCBnbG9iYWwudGlueUVtaXR0ZXIsIGdsb2JhbC5nb29kTGlzdGVuZXIpO1xuICAgICAgICBnbG9iYWwuY2xpcGJvYXJkID0gbW9kLmV4cG9ydHM7XG4gICAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX2NsaXBib2FyZEFjdGlvbiwgX3RpbnlFbWl0dGVyLCBfZ29vZExpc3RlbmVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9jbGlwYm9hcmRBY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkQWN0aW9uKTtcblxuICAgIHZhciBfdGlueUVtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGlueUVtaXR0ZXIpO1xuXG4gICAgdmFyIF9nb29kTGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ29vZExpc3RlbmVyKTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gICAgfVxuXG4gICAgdmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfRW1pdHRlcikge1xuICAgICAgICBfaW5oZXJpdHMoQ2xpcGJvYXJkLCBfRW1pdHRlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0cmlnZ2VyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmQodHJpZ2dlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDbGlwYm9hcmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDbGlwYm9hcmQpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICBfdGhpcy5saXN0ZW5DbGljayh0cmlnZ2VyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGlmIGF0dHJpYnV0ZXMgd291bGQgYmUgcmVzb2x2ZWQgdXNpbmcgaW50ZXJuYWwgc2V0dGVyIGZ1bmN0aW9uc1xuICAgICAgICAgKiBvciBjdXN0b20gZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmQsIFt7XG4gICAgICAgICAgICBrZXk6ICdyZXNvbHZlT3B0aW9ucycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5hY3Rpb24gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmFjdGlvbiA6IHRoaXMuZGVmYXVsdEFjdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHR5cGVvZiBvcHRpb25zLnRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMudGFyZ2V0IDogdGhpcy5kZWZhdWx0VGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHR5cGVvZiBvcHRpb25zLnRleHQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnRleHQgOiB0aGlzLmRlZmF1bHRUZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gX3R5cGVvZihvcHRpb25zLmNvbnRhaW5lcikgPT09ICdvYmplY3QnID8gb3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdsaXN0ZW5DbGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuQ2xpY2sodHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9ICgwLCBfZ29vZExpc3RlbmVyMi5kZWZhdWx0KSh0cmlnZ2VyLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ29uQ2xpY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gZS5kZWxlZ2F0ZVRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbmV3IF9jbGlwYm9hcmRBY3Rpb24yLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuYWN0aW9uKHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0KHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQodHJpZ2dlciksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdEFjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCdhY3Rpb24nLCB0cmlnZ2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdFRhcmdldCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gZ2V0QXR0cmlidXRlVmFsdWUoJ3RhcmdldCcsIHRyaWdnZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHRUZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCd0ZXh0JywgdHJpZ2dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSwgW3tcbiAgICAgICAgICAgIGtleTogJ2lzU3VwcG9ydGVkJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2NvcHknLCAnY3V0J107XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnID8gW2FjdGlvbl0gOiBhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIHN1cHBvcnQgPSAhIWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZDtcblxuICAgICAgICAgICAgICAgIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgPSBzdXBwb3J0ICYmICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBDbGlwYm9hcmQ7XG4gICAgfShfdGlueUVtaXR0ZXIyLmRlZmF1bHQpO1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VmZml4XG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QXR0cmlidXRlVmFsdWUoc3VmZml4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSAnZGF0YS1jbGlwYm9hcmQtJyArIHN1ZmZpeDtcblxuICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY2xpcGJvYXJkL2xpYi9jbGlwYm9hcmQuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ21vZHVsZScsICdzZWxlY3QnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnc2VsZWN0JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2QgPSB7XG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLnNlbGVjdCk7XG4gICAgICAgIGdsb2JhbC5jbGlwYm9hcmRBY3Rpb24gPSBtb2QuZXhwb3J0cztcbiAgICB9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlLCBfc2VsZWN0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9zZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0KTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdmFyIENsaXBib2FyZEFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmRBY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZEFjdGlvbik7XG5cbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmluaXRTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGJhc2UgcHJvcGVydGllcyBwYXNzZWQgZnJvbSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgICAgICovXG5cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoQ2xpcGJvYXJkQWN0aW9uLCBbe1xuICAgICAgICAgICAga2V5OiAncmVzb2x2ZU9wdGlvbnMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKCkge1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gb3B0aW9ucy5hY3Rpb247XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIgPSBvcHRpb25zLmVtaXR0ZXI7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBvcHRpb25zLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBvcHRpb25zLnRleHQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyID0gb3B0aW9ucy50cmlnZ2VyO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5pdFNlbGVjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RmFrZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NlbGVjdEZha2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEZha2UoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBpc1JUTCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpID09ICdydGwnO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGYWtlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVGYWtlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyID0gdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spIHx8IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHpvb21pbmcgb24gaU9TXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JztcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBib3ggbW9kZWxcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLmJvcmRlciA9ICcwJztcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50IG91dCBvZiBzY3JlZW4gaG9yaXpvbnRhbGx5XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZVtpc1JUTCA/ICdyaWdodCcgOiAnbGVmdCddID0gJy05OTk5cHgnO1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgZWxlbWVudCB0byB0aGUgc2FtZSBwb3NpdGlvbiB2ZXJ0aWNhbGx5XG4gICAgICAgICAgICAgICAgdmFyIHlQb3NpdGlvbiA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUudG9wID0geVBvc2l0aW9uICsgJ3B4JztcblxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnZhbHVlID0gdGhpcy50ZXh0O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5mYWtlRWxlbSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHlUZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3JlbW92ZUZha2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZha2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mYWtlRWxlbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzZWxlY3RUYXJnZXQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdFRhcmdldCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdjb3B5VGV4dCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29weVRleHQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2NlZWRlZCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRlZCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXN1bHQoc3VjY2VlZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaGFuZGxlUmVzdWx0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoc3VjY2VlZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoc3VjY2VlZGVkID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnNlbGVjdGVkVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50cmlnZ2VyLFxuICAgICAgICAgICAgICAgICAgICBjbGVhclNlbGVjdGlvbjogdGhpcy5jbGVhclNlbGVjdGlvbi5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2NsZWFyU2VsZWN0aW9uJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnYWN0aW9uJyxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdjb3B5JztcblxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb24gIT09ICdjb3B5JyAmJiB0aGlzLl9hY3Rpb24gIT09ICdjdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcImFjdGlvblwiIHZhbHVlLCB1c2UgZWl0aGVyIFwiY29weVwiIG9yIFwiY3V0XCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndGFyZ2V0JyxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXQpKSA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09ICdjb3B5JyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwidGFyZ2V0XCIgYXR0cmlidXRlLiBQbGVhc2UgdXNlIFwicmVhZG9ubHlcIiBpbnN0ZWFkIG9mIFwiZGlzYWJsZWRcIiBhdHRyaWJ1dGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAnY3V0JyAmJiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZSgncmVhZG9ubHknKSB8fCB0YXJnZXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gWW91IGNhblxcJ3QgY3V0IHRleHQgZnJvbSBlbGVtZW50cyB3aXRoIFwicmVhZG9ubHlcIiBvciBcImRpc2FibGVkXCIgYXR0cmlidXRlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiB2YWx1ZSwgdXNlIGEgdmFsaWQgRWxlbWVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gQ2xpcGJvYXJkQWN0aW9uO1xuICAgIH0oKTtcblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkQWN0aW9uO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY2xpcGJvYXJkL2xpYi9jbGlwYm9hcmQtYWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUiLCJmdW5jdGlvbiBzZWxlY3QoZWxlbWVudCkge1xuICAgIHZhciBzZWxlY3RlZFRleHQ7XG5cbiAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdJTlBVVCcgfHwgZWxlbWVudC5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykge1xuICAgICAgICB2YXIgaXNSZWFkT25seSA9IGVsZW1lbnQuaGFzQXR0cmlidXRlKCdyZWFkb25seScpO1xuXG4gICAgICAgIGlmICghaXNSZWFkT25seSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zZWxlY3QoKTtcbiAgICAgICAgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSgwLCBlbGVtZW50LnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKCFpc1JlYWRPbmx5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncmVhZG9ubHknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbGVtZW50KTtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IHNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3RlZFRleHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VsZWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2VsZWN0L3NyYy9zZWxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsImZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdGlueS1lbWl0dGVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUiLCJ2YXIgaXMgPSByZXF1aXJlKCcuL2lzJyk7XG52YXIgZGVsZWdhdGUgPSByZXF1aXJlKCdkZWxlZ2F0ZScpO1xuXG4vKipcbiAqIFZhbGlkYXRlcyBhbGwgcGFyYW1zIGFuZCBjYWxscyB0aGUgcmlnaHRcbiAqIGxpc3RlbmVyIGZ1bmN0aW9uIGJhc2VkIG9uIGl0cyB0YXJnZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudHxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRhcmdldCAmJiAhdHlwZSAmJiAhY2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50cycpO1xuICAgIH1cblxuICAgIGlmICghaXMuc3RyaW5nKHR5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpcy5mbihjYWxsYmFjaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcmQgYXJndW1lbnQgbXVzdCBiZSBhIEZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzLm5vZGUodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuTm9kZSh0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXMubm9kZUxpc3QodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuTm9kZUxpc3QodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzLnN0cmluZyh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5TZWxlY3Rvcih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBTdHJpbmcsIEhUTUxFbGVtZW50LCBIVE1MQ29sbGVjdGlvbiwgb3IgTm9kZUxpc3QnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBhIEhUTUwgZWxlbWVudFxuICogYW5kIHJldHVybnMgYSByZW1vdmUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbk5vZGUobm9kZSwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBhIGxpc3Qgb2YgSFRNTCBlbGVtZW50c1xuICogYW5kIHJldHVybnMgYSByZW1vdmUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtOb2RlTGlzdHxIVE1MQ29sbGVjdGlvbn0gbm9kZUxpc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5Ob2RlTGlzdChub2RlTGlzdCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgc2VsZWN0b3JcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3RlblNlbGVjdG9yKHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBkZWxlZ2F0ZShkb2N1bWVudC5ib2R5LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RlbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dvb2QtbGlzdGVuZXIvc3JjL2xpc3Rlbi5qc1xuLy8gbW9kdWxlIGlkID0gNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IiwiLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIEhUTUwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMubm9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBsaXN0IG9mIEhUTUwgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLm5vZGVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiAodHlwZSA9PT0gJ1tvYmplY3QgTm9kZUxpc3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nKVxuICAgICAgICAmJiAoJ2xlbmd0aCcgaW4gdmFsdWUpXG4gICAgICAgICYmICh2YWx1ZS5sZW5ndGggPT09IDAgfHwgZXhwb3J0cy5ub2RlKHZhbHVlWzBdKSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5zdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5mbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ29vZC1saXN0ZW5lci9zcmMvaXMuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsInZhciBjbG9zZXN0ID0gcmVxdWlyZSgnLi9jbG9zZXN0Jyk7XG5cbi8qKlxuICogRGVsZWdhdGVzIGV2ZW50IHRvIGEgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIF9kZWxlZ2F0ZShlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICB2YXIgbGlzdGVuZXJGbiA9IGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZXZlbnQgdG8gYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfEFycmF5fSBbZWxlbWVudHNdXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGRlbGVnYXRlKGVsZW1lbnRzLCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAvLyBIYW5kbGUgdGhlIHJlZ3VsYXIgRWxlbWVudCB1c2FnZVxuICAgIGlmICh0eXBlb2YgZWxlbWVudHMuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIEVsZW1lbnQtbGVzcyB1c2FnZSwgaXQgZGVmYXVsdHMgdG8gZ2xvYmFsIGRlbGVnYXRpb25cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVXNlIGBkb2N1bWVudGAgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciwgdGhlbiBhcHBseSBhcmd1bWVudHNcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNob3J0IHdheSB0byAudW5zaGlmdCBgYXJndW1lbnRzYCB3aXRob3V0IHJ1bm5pbmcgaW50byBkZW9wdGltaXphdGlvbnNcbiAgICAgICAgcmV0dXJuIF9kZWxlZ2F0ZS5iaW5kKG51bGwsIGRvY3VtZW50KS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBTZWxlY3Rvci1iYXNlZCB1c2FnZVxuICAgIGlmICh0eXBlb2YgZWxlbWVudHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIEFycmF5LWxpa2UgYmFzZWQgdXNhZ2VcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogRmluZHMgY2xvc2VzdCBtYXRjaCBhbmQgaW52b2tlcyBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXIoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5kZWxlZ2F0ZVRhcmdldCA9IGNsb3Nlc3QoZS50YXJnZXQsIHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAoZS5kZWxlZ2F0ZVRhcmdldCkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChlbGVtZW50LCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWxlZ2F0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2RlbGVnYXRlL3NyYy9kZWxlZ2F0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IiwidmFyIERPQ1VNRU5UX05PREVfVFlQRSA9IDk7XG5cbi8qKlxuICogQSBwb2x5ZmlsbCBmb3IgRWxlbWVudC5tYXRjaGVzKClcbiAqL1xuaWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgIHZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8ubWF0Y2hlcyA9IHByb3RvLm1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ubXNNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcGFyZW50IHRoYXQgbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY2xvc2VzdCAoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlICE9PSBET0NVTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50Lm1hdGNoZXMgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9zZXN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGVsZWdhdGUvc3JjL2Nsb3Nlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsImltcG9ydCB0cGwgZnJvbSAnLi9pbmRleC5odG1sJ1xyXG5pbXBvcnQga28gZnJvbSAna25vY2tvdXQnXHJcbmZ1bmN0aW9uIGluaXQgKHBhcmFtcykge1xyXG4gIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lIHx8ICcnXHJcbiAgdGhpcy5saW5rID0gcGFyYW1zLmxpbmsgfHwgJydcclxufVxyXG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCd5LXRpdGxlJywge1xyXG4gIHZpZXdNb2RlbDogaW5pdCxcclxuICB0ZW1wbGF0ZTogdHBsXHJcbn0pXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL3RpdGxlL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMT5cXHJcXG4gIDxzcGFuIGRhdGEtYmluZD1cXFwidGV4dDogbmFtZVxcXCI+PC9zcGFuPue7hOS7tlxcclxcbjwvaDE+XFxyXFxuPCEtLSBrbyBpZjogbGluay0tPlxcclxcbjxoMj5cXHJcXG4gIDxhIGRhdGEtYmluZD1cXFwiYXR0cjoge2hyZWY6IGxpbmt9XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgc3R5bGU9XFxcImNvbG9yOiAjMmJhZWU5XFxcIj5cXHJcXG4gICAgPHNwYW4gZGF0YS1iaW5kPVxcXCJ0ZXh0OiBuYW1lXFxcIj48L3NwYW4+57uE5Lu2QVBJ5paH5qGjXFxyXFxuICA8L2E+XFxyXFxuPC9oMj5cXHJcXG48IS0tIC9rbyAtLT5cXHJcXG48aDI+5Luj56CB56S65L6LPC9oMj5cXHJcXG5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3RpdGxlL2luZGV4Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJ5LWJveFxcXCI+XFxyXFxuICA8eS10aXRsZSBwYXJhbXM9XFxcIm5hbWU6ICdCdXR0b27mjInpkq4nLCBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL3lvbnlvdXljL2Jsb2cvaXNzdWVzLzM2J1xcXCI+PC95LXRpdGxlPlxcclxcbiAgPGRlbW8gcGFyYW1zPVxcXCJjb2RlOmNvZGUudHlwZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtdG9wXFxcIj5cXHJcXG4gICAgICA8eS1idXR0b24+RGVmYXVsdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3ByaW1hcnknXFxcIj5QcmltYXJ5PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnZ2hvc3QnXFxcIj5HaG9zdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2Rhc2hlZCdcXFwiPkRhc2hlZDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3RleHQnXFxcIj5UZXh0PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8aHIgY2xhc3M9XFxcImhyLWZpeFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2luZm8nXFxcIj5JbmZvPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnc3VjY2VzcydcXFwiPlN1Y2Nlc3M8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICd3YXJuaW5nJ1xcXCI+V2FybmluZzwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2Vycm9yJ1xcXCI+RXJyb3I8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+5Z+656GA55So5rOVPC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOaMiemSruexu+Wei+acie+8mum7mOiupOaMiemSruOAgeS4u+aMiemSruOAgeW5veeBteaMiemSruOAgeiZmue6v+aMiemSruOAgeaWh+Wtl+aMiemSruS7peWPiuWbm+enjeminOiJsuaMiemSruOAglxcclxcbiAgICAgIOmAmui/h+iuvue9rjxjb2RlPnR5cGU8L2NvZGU+5Li6PGNvZGU+cHJpbWFyeTwvY29kZT7jgIE8Y29kZT5naG9zdDwvY29kZT7jgIE8Y29kZT5kYXNoZWQ8L2NvZGU+44CBPGNvZGU+dGV4dDwvY29kZT7jgIE8Y29kZT5pbmZvPC9jb2RlPuOAgTxjb2RlPnN1Y2Nlc3M8L2NvZGU+44CBPGNvZGU+d2FybmluZzwvY29kZT7jgIE8Y29kZT5lcnJvcjwvY29kZT7liJvlu7rkuI3lkIzmoLflvI/nmoTmjInpkq7vvIzkuI3orr7nva7kuLrpu5jorqTmoLflvI/jgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS5zaGFwZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtdG9wXFxcIj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnd2FybmluZycsIHNoYXBlOiAnY2lyY2xlJ1xcXCI+MC4wPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnd2FybmluZydcXFwiPjAuMDwveS1idXR0b24+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXNwbGl0XFxcIj5cXHJcXG4gICAgICA8c3Bhbj7mjInpkq7lvaLnirY8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H6K6+572uPGNvZGU+c2hhcGU8L2NvZGU+5bGe5oCn5Li6PGNvZGU+Y2lyY2xlPC9jb2RlPu+8jOWPr+WwhuaMiemSrue9ruS4uuWchueahOW9oueKtuOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLnNpemVcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2l6ZTogJ2xhcmdlJ1xcXCI+TGFyZ2U8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdnaG9zdCdcXFwiPkRlZmF1bHQ8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdnaG9zdCcsIHNpemU6ICdzbWFsbCdcXFwiPlNtYWxsPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8aHIgY2xhc3M9XFxcImhyLWZpeFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2hhcGU6ICdjaXJjbGUnLCBzaXplOiAnbGFyZ2UnXFxcIj5MYXJnZTwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2dob3N0Jywgc2hhcGU6ICdjaXJjbGUnXFxcIj5EZWZhdWx0PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnZ2hvc3QnLCBzaGFwZTogJ2NpcmNsZScsIHNpemU6ICdzbWFsbCdcXFwiPlNtYWxsPC95LWJ1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtc3BsaXRcXFwiPlxcclxcbiAgICAgIDxzcGFuPuaMiemSruWwuuWvuDwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvZGUtYm90dG9tXFxcIj5cXHJcXG4gICAgICDmjInpkq7mnInkuInnp43lsLrlr7jvvJrlpKfjgIHpu5jorqTvvIjkuK3vvInjgIHlsI9cXHJcXG4gICAgICDpgJrov4forr7nva48Y29kZT5zaXplPC9jb2RlPuS4ujxjb2RlPmxhcmdlPC9jb2RlPuWSjDxjb2RlPnNtYWxsPC9jb2RlPuWwhuaMiemSruiuvue9ruS4uuWkp+WSjOWwj+WwuuWvuO+8jOS4jeiuvue9ruS4uum7mOiupO+8iOS4re+8ieWwuuWvuOOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLmRpc2FibGVkXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS10b3BcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdwcmltYXJ5J1xcXCI+RGVmYXVsdDwveS1idXR0b24+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3ByaW1hcnknLCBkaXNhYmxlZDogdHJ1ZVxcXCI+RGVmYXVsdChEaXNhYmxlZCk8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+5LiN5Y+v55So54q25oCBPC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOmAmui/h+a3u+WKoDxjb2RlPmRpc2FibGVkPC9jb2RlPuWxnuaAp+WPr+WwhuaMiemSruiuvue9ruS4uuS4jeWPr+eUqOeKtuaAgeOAglxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGVtbz5cXHJcXG5cXHJcXG4gIDxkZW1vIHBhcmFtcz1cXFwiY29kZTpjb2RlLmxvYWRpbmdcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ3N1Y2Nlc3MnXFxcIj5TdWNjZXNzPC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnc3VjY2VzcycsIGNsaWNrOiAkcGFyZW50LmxvYWQsIGxvYWRpbmc6ICRwYXJlbnQubG9hZGluZ1xcXCI+TG9hZGluZzwveS1idXR0b24+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXNwbGl0XFxcIj5cXHJcXG4gICAgICA8c3Bhbj7liqDovb3kuK3nirbmgIE8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H5re75YqgPGNvZGU+bG9hZGluZzwvY29kZT7lsZ7mgKflj6/ku6XorqnmjInpkq7lpITkuo7liqDovb3kuK3nirbmgIHvvIzlkI7kuKTkuKrmjInpkq7lnKjngrnlh7vml7bov5vlhaXliqDovb3nirbmgIHjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS53YWl0XFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS10b3BcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdlcnJvcicsIGNsaWNrOiAkcGFyZW50LndhaXRcXFwiPkRlZmF1bHQ8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdlcnJvcicsIGNsaWNrOiAkcGFyZW50LndhaXQsIHdhaXQ6IDMwMDBcXFwiPndhaXQ8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+6K6+572u562J5b6F5pe26Ze0PC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1ib3R0b21cXFwiPlxcclxcbiAgICAgIOmAmui/h+a3u+WKoDxjb2RlPndhaXQ8L2NvZGU+5bGe5oCn5Li6PGNvZGU+buavq+enkuaVsDwvY29kZT7vvIzlj6/ku6XorqnmjInpkq7lpITkuo7kuI3lj6/ngrnlh7vnirbmgIHvvIzpmLLmraLlv6vpgJ/ngrnlh7vlpJrmrKHop6blj5Hkuovku7bjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuXFxyXFxuICA8ZGVtbyBwYXJhbXM9XFxcImNvZGU6Y29kZS5idG5UeXBlX2FcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLXRvcFxcXCI+XFxyXFxuICAgICAgPHktYnV0dG9uIHBhcmFtcz1cXFwidHlwZTogJ2luZm8nLCBidG5UeXBlOiAnYScsIHVybDogJ3d3dy5iYWlkdS5jb20nXFxcIj7nm7jlr7not6/lvoTmnKzpobXot7Povaw8L3ktYnV0dG9uPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgcm9vdFBhdGg6IHRydWVcXFwiPue7neWvuei3r+W+hOacrOmhtei3s+i9rDwveS1idXR0b24+XFxyXFxuICAgICAgPGhyIGNsYXNzPVxcXCJoci1maXhcXFwiPlxcclxcbiAgICAgIDx5LWJ1dHRvbiBwYXJhbXM9XFxcInR5cGU6ICdpbmZvJywgYnRuVHlwZTogJ2EnLCB1cmw6ICd3d3cuYmFpZHUuY29tJywgdGFyZ2V0OiAnX2JsYW5rJ1xcXCI+55u45a+56Lev5b6E5omT5byA5paw5byA6aG1PC95LWJ1dHRvbj5cXHJcXG4gICAgICA8eS1idXR0b24gcGFyYW1zPVxcXCJ0eXBlOiAnaW5mbycsIGJ0blR5cGU6ICdhJywgdXJsOiAnd3d3LmJhaWR1LmNvbScsIHJvb3RQYXRoOiB0cnVlLCB0YXJnZXQ6ICdfYmxhbmsnXFxcIj7nu53lr7not6/lvoTmiZPlvIDmlrDlvIDpobU8L3ktYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29kZS1zcGxpdFxcXCI+XFxyXFxuICAgICAgPHNwYW4+YnRuVHlwZeiuvue9ruS4umHml7Y8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2RlLWJvdHRvbVxcXCI+XFxyXFxuICAgICAg6YCa6L+H6K6+572uPGNvZGU+YnRuVHlwZTwvY29kZT7kuLo8Y29kZT5hPC9jb2RlPu+8jOa3u+WKoDxjb2RlPnVybDwvY29kZT7kuLo8Y29kZT7nm67moId1cmw8L2NvZGU+77yM5re75YqgPGNvZGU+cm9vdFBhdGg8L2NvZGU+5Li6PGNvZGU+ZmFsc2UvdHJ1ZSjpu5jorqTkuLpmYWxzZSk8L2NvZGU+5o6n5Yi25pys6aG16Lez6L2s5oiW6ICF5paw6aG16Z2i5omT5byA77yMPGNvZGU+dGFyZ2V0PC9jb2RlPuS4jmHnmoR0YXJnZXTkv53mjIHkuIDoh7TvvIzop4TlrprlnKjkvZXlpITmiZPlvIDpk77mjqXmlofmoaPjgIJcXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2RlbW8+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdmlld3MvYnV0dG9uL2luZGV4Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMjIiXSwic291cmNlUm9vdCI6IiJ9