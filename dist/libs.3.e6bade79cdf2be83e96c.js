webpackJsonp([3],{24:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e={code:['<template>\n        <y-switch params="checked: $parent.checked1"></y-switch>\n      </template>\n      <script>\n        var viewmodel = {\n          checked1: ko.observable(false)\n        }\n        viewmodel.checked1.subscribe((val) => {\n          window.alert(val)\n        })\n      <\/script>\n      ','<template>\n        <y-switch params="checked: $parent.checked2[0], size: \'large\'"></y-switch>\n        <y-switch params="checked: $parent.checked2[1]"></y-switch>\n        <y-switch params="checked: $parent.checked2[2], size: \'small\'"></y-switch>\n      </template>\n      <script>\n        var viewmodel = {\n          checked2: [\n            ko.observable(false),\n            ko.observable(false),\n            ko.observable(false)\n          ]\n        }\n      <\/script>\n      ','<template>\n        <y-switch params="checked: $parent.checked3[0]">\n          <span data-bind="text: checked()? \'开\': \'关\'"></span>\n        </y-switch>\n        <y-switch params="checked: $parent.checked3[1]">\n          <span data-bind="visible: checked">\n            <i class="fa fa-check"></i>\n          </span>\n          <span data-bind="visible: !checked()">\n            <i class="fa fa-times"></i>\n          </span>\n        </y-switch>\n      </template>\n      <script>\n        var viewmodel = {\n          checked3: [\n            ko.observable(false),\n            ko.observable(false)\n          ]\n        }\n      <\/script>\n      ','<template>\n        <y-switch params="checked: $parent.checked4, disabled: $parent.disabled"></y-switch>\n        <y-button params="type: \'success\', click: $parent.toggle">toggle</y-button>\n      </template>\n      <script>\n        var viewmodel = {\n          checked4: ko.observable(false),\n          disabled: ko.observable(true),\n          toggle: () => {\n            viewmodel.disabled(!viewmodel.disabled())\n          }\n        }\n      <\/script>\n      '],checked1:r.default.observable(!1),checked2:[r.default.observable(!1),r.default.observable(!1),r.default.observable(!1)],checked3:[r.default.observable(!1),r.default.observable(!1)],checked4:r.default.observable(!1),disabled:r.default.observable(!0),toggle:function(){e.disabled(!e.disabled())}};e.checked1.subscribe(function(e){window.alert(e)}),r.default.applyBindings(e,document.getElementById("app"))}Object.defineProperty(t,"__esModule",{value:!0});var i=n(69),o=_interopRequireDefault(i),a=n(0),r=_interopRequireDefault(a);n(42),t.default={template:o.default,init:init}},42:function(e,t,n){"use strict";n(43),n(58)},43:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=r.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var i=n(44),o=_interopRequireDefault(i);n(45),n(46);var a=n(0),r=_interopRequireDefault(a);r.default.components.register("demo",{viewModel:init,template:o.default})},44:function(e,t){e.exports='<div class="demo">\n  <div class="demo-show">\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\n  </div>\n  <div class="demo-split"></div>\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\n    <y-code params="code:code"></y-code>\n  </div>\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\n</div>\n'},45:function(e,t){},46:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,t){var n=this;this.$el=t.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var t=new d.default(".copy",{text:function(){return e.code}});t.on("success",function(e){e.clearSelection(),t.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){s.default.highlightBlock(n.$el)})}var i=n(47),o=_interopRequireDefault(i);n(48);var a=n(0),r=_interopRequireDefault(a),c=n(3),s=_interopRequireDefault(c),l=n(49),d=_interopRequireDefault(l);n(57),r.default.components.register("y-code",{viewModel:{createViewModel:function(e,t){return new Init(e,t.element)}},template:o.default})},47:function(e,t){e.exports='<div class="code">\n  <div class="tools">\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\n  </div>\n  <pre><code class="html" data-bind="text: code"></code></pre>\n</div>\n'},48:function(e,t){},49:function(e,t,n){var i,o,a;!function(r,c){o=[e,n(50),n(52),n(53)],i=c,void 0!==(a="function"==typeof i?i.apply(t,o):i)&&(e.exports=a)}(0,function(e,t,n,i){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function getAttributeValue(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var o=_interopRequireDefault(t),a=_interopRequireDefault(n),r=_interopRequireDefault(i),c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),l=function(e){function Clipboard(e,t){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(t),n.listenClick(e),n}return _inherits(Clipboard,e),s(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===c(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,r.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new o.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var t=getAttributeValue("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),Clipboard}(a.default);e.exports=l})},50:function(e,t,n){var i,o,a;!function(r,c){o=[e,n(51)],i=c,void 0!==(a="function"==typeof i?i.apply(t,o):i)&&(e.exports=a)}(0,function(e,t){"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(e){return e&&e.__esModule?e:{default:e}}(t),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),a=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return o(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=a})},51:function(e,t){function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var i=window.getSelection(),o=document.createRange();o.selectNodeContents(e),i.removeAllRanges(),i.addRange(o),t=i.toString()}return t}e.exports=select},52:function(e,t){function E(){}E.prototype={on:function(e,t,n){var i=this.e||(this.e={});return(i[e]||(i[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function listener(){i.off(e,listener),t.apply(n,arguments)}var i=this;return listener._=t,this.on(e,listener,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),i=0,o=n.length;for(i;i<o;i++)n[i].fn.apply(n[i].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),i=n[e],o=[];if(i&&t)for(var a=0,r=i.length;a<r;a++)i[a].fn!==t&&i[a].fn._!==t&&o.push(i[a]);return o.length?n[e]=o:delete n[e],this}},e.exports=E},53:function(e,t,n){function listen(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!i.string(t))throw new TypeError("Second argument must be a String");if(!i.fn(n))throw new TypeError("Third argument must be a Function");if(i.node(e))return listenNode(e,t,n);if(i.nodeList(e))return listenNodeList(e,t,n);if(i.string(e))return listenSelector(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}function listenNodeList(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}function listenSelector(e,t,n){return o(document.body,e,t,n)}var i=n(54),o=n(55);e.exports=listen},54:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},55:function(e,t,n){function _delegate(e,t,n,i,o){var a=listener.apply(this,arguments);return e.addEventListener(n,a,o),{destroy:function(){e.removeEventListener(n,a,o)}}}function delegate(e,t,n,i,o){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,i,o)}))}function listener(e,t,n,o){return function(n){n.delegateTarget=i(n.target,t),n.delegateTarget&&o.call(e,n)}}var i=n(56);e.exports=delegate},56:function(e,t){function closest(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var i=Element.prototype;i.matches=i.matchesSelector||i.mozMatchesSelector||i.msMatchesSelector||i.oMatchesSelector||i.webkitMatchesSelector}e.exports=closest},57:function(e,t){},58:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var i=n(59),o=_interopRequireDefault(i);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:o.default})},59:function(e,t){e.exports='<h1>\n  <span data-bind="text: name"></span>组件\n</h1>\n\x3c!-- ko if: link--\x3e\n<h2>\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\n    <span data-bind="text: name"></span>组件API文档\n  </a>\n</h2>\n\x3c!-- /ko --\x3e\n<h2>代码示例</h2>\n'},69:function(e,t){e.exports='<div class="y-box">\n  <y-title params="name: \'Switch开关\', link: \'https://github.com/yonyouyc/blog/issues/39\'"></y-title>\n  <demo params="code:code[0]">\n    <div class="code-top">\n      <y-switch params="checked: $parent.checked1"></y-switch>\n    </div>\n    <div class="code-split">\n      <span>基本</span>\n    </div>\n    <div class="code-bottom">\n      基本用法，状态切换时会触发事件。\n    </div>\n  </demo>\n\n  <demo params="code:code[1]">\n    <div class="code-top">\n      <y-switch params="checked: $parent.checked2[0], size: \'large\'"></y-switch>\n      <hr class="hr-fix">\n      <y-switch params="checked: $parent.checked2[1]"></y-switch>\n      <hr class="hr-fix">\n      <y-switch params="checked: $parent.checked2[2], size: \'small\'"></y-switch>\n    </div>\n    <div class="code-split">\n      <span>尺寸</span>\n    </div>\n    <div class="code-bottom">\n      设置<code>size</code>为<code>large</code>或<code>small</code>使用大号和小号的开关。\n    </div>\n  </demo>\n\n  <demo params="code:code[2]">\n    <div class="code-top">\n      <y-switch params="checked: $parent.checked3[0]">\n        <span data-bind="text: checked()? \'开\': \'关\'"></span>\n      </y-switch>\n      <hr class="hr-fix">\n      <y-switch params="checked: $parent.checked3[1]">\n        <span data-bind="visible: checked">\n          <i class="fa fa-check"></i>\n        </span>\n        <span data-bind="visible: !checked()">\n          <i class="fa fa-times"></i>\n        </span>\n      </y-switch>\n    </div>\n    <div class="code-split">\n      <span>自定义内容</span>\n    </div>\n    <div class="code-bottom">\n      自定义内容，建议如果使用2个汉字，将开关尺寸设置为<code>large</code>。\n    </div>\n  </demo>\n\n  <demo params="code:code[3]">\n    <div class="code-top">\n      <span><y-switch params="checked: $parent.checked4, disabled: $parent.disabled"></y-switch></span>\n      <hr class="hr-fix">\n      <y-button params="type: \'success\', click: $parent.toggle">toggle</y-button>\n    </div>\n    <div class="code-split">\n      <span>不可用</span>\n    </div>\n    <div class="code-bottom">\n      禁用开关。\n    </div>\n  </demo>\n</div>\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,