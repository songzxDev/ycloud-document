webpackJsonp([14],{20:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e={code:["\n      <template>\n        <y-grid params=\"rows:$root.caculateRows, \n        columns: $root.caculateMainColumns, \n        caculateColumns: $root.caculateColumns\">\n        </y-grid>\n      </template>\n      <script>\n      var viewmodel = {\n        caculateColumns: [{\n          type: 'render',\n          _show: true,\n          renderFn (row) {\n            return '合计：'\n          }\n        }, {\n          _show: true,\n          type: 'render',\n          align: 'right',\n          // 在此自有定义你的合计计算方法\n          renderFn (row) {\n            return '¥ ' + _.reduce(viewmodel.caculateRows(), function (a, b) {\n              return {age: (a.age - 0) + (b.age - 0)}\n            }, {\n              age: 0\n            }).age\n          }\n        }, {\n          _show: true\n        }],\n        caculateRows: ko.observableArray([\n          {\n            name: 'name',\n            age: 24000.034,\n            sex: '男'\n          }, {\n            name: 'name',\n            age: 223291.0000000,\n            sex: '男'\n          }, {\n            name: 'name',\n            age: '2112389.010',\n            sex: '男'\n          }, {\n            name: 'name',\n            age: 2300000.01,\n            sex: '男'\n          }\n        ]),\n        caculateMainColumns: [{\n          title: '姓名',\n          field: 'name',\n          type: 'render',\n          renderFn: function (row) {\n            return \"<a href='http://www.baidu.com'>row.name</a>\"\n          }\n        }, {\n          title: '价格',\n          field: 'age',\n          align: 'right',\n          dataType: 'money'\n        }, {\n          title: '性别',\n          field: 'sex',\n        }]\n      } \n    <\/script>\n    ","\n    <template>\n      <y-basicgrid params=\"maxheight:'205px',ref:'loadingGrid',columns:$root.ComputeColumns,rows: $root.ComputeRows\"></y-basicgrid>\n    </template>\n    <script>\n      var viewmodel = {\n        ComputeRows: ko.observableArray([{\n          id: 1,\n          name: 'name',\n          price: ko.observable(23),\n          num: 2,\n          total: 46\n        }, {\n          id: 1,\n          name: 'name',\n          price: ko.observable(23),\n          num: 2,\n          total: 46\n        }]),\n        ComputeColumns: [{\n          title: '单价+',\n          field: 'id',\n          type: 'component',\n          compFn (row) {\n            return {\n              name: 'y-grid-merge-td',\n              params: {\n                dataList: [\n                  {\n                    field: 'price'\n                  }, {\n                    field: 'num',\n                    type: 'render',\n                    renderFn () {\n                      var html = '<div>数量：' + row.num + '</div>'\n                      return html\n                    }\n                  }, {\n                    field: 'id',\n                    type: 'component',\n                    compFn () {\n                      return {\n                        name: 'y-input',\n                        params: {\n                          value: row.price,\n                          placeholder: '你好世界'\n                        }\n                      }\n                    }\n                  }\n                ],\n                row: row\n              }\n            }\n          }\n        }, {\n          title: '总价',\n          field: 'total'\n        }]\n      } \n    <\/script>\n    ","\n      <template>\n        <y-basicgrid params=\"ref:'lazygrid',lockcolumn: true,lockhead:true,handleScroll:$root.lazyScroll,lazy: $root.gridLazy, rows: $root.lazyRows, columns: $root.lazyColumns\">\n        </y-basicgrid>\n      </template>\n      <script >\n      var viewmodel = {\n        gridLazy: {\n          lazyStart: ko.observable(0),\n          lazyEnd: ko.observable(10)\n        }\n      }\n      var lazyGrid = null\n      var el = null\n      setTimeout(function () {\n        lazyGrid = window.ycloud.$refs['lazygrid']\n        el = window.$(lazyGrid.$el).find('.y-grid-body table')[0]\n      })\n    \n      // 示例代码\n      viewmodel.lazyScroll = function (event, scrollTop) {\n        var index = lazyGrid.getFitIndexByScrollTop(scrollTop)\n        if (index === -1) {\n          var curIndex = Math.round(datas.length * scrollTop / el.offsetHeight)\n          index = curIndex\n        }\n        // 详细参数根据不同页面的数据级别灵活调整\n        viewmodel.gridLazy.lazyStart(index - 30 < datas.length - datas.length / 5 ? index - 30 : datas.length - datas.length / 5)\n        viewmodel.gridLazy.lazyEnd(index + 30 > datas.length ? datas.length : index + 30)\n      }\n      <\/script>\n    ","\n    <template>\n      <y-grid params=\"\n          crossPageSelectedRows: $root.crossPageRows,\n          onPageChange:$root.handleChange,\n          onSizeChange:$root.handleChange,\n          pagination:true,totalCount:ko.observable(20),\n          maxheight:'auto',\n          rows:$root.pageRows,\n          columns: $root.pageColumns\">\n        </y-grid>\n    </template>\n    <script>\n      var vm = {\n        crossPageRows: ko.observableArray([])\n      }\n    <\/script>\n    "],caculateRows:a.default.observableArray([{name:"name",age:24000.034,sex:"男"},{name:"name",age:223291,sex:"男"},{name:"name",age:"2112389.010",sex:"男"},{name:"name",age:2300000.01,sex:"男"}]),caculateMainColumns:[{title:"姓名",field:"name",type:"render",renderFn:function(e){return"<a href='http://www.baidu.com'>row.name</a>"}},{title:"价格",field:"age",align:"right",dataType:"money"},{title:"性别",field:"sex"}],caculateColumns:[{type:"render",_show:!0,renderFn:function(e){return"<b>合计：</b>"}},{_show:!0,type:"render",align:"right",renderFn:function(t){return"<span style=\"font-family: 'Microsoft YaHei'\">¥ </span>"+d.default.reduce(e.caculateRows(),function(e,t){return{age:e.age-0+(t.age-0)}},{age:0}).age}},{_show:!0}],ComputeRows:a.default.observableArray([{id:1,name:"name",price:a.default.observable(23),num:2,total:46},{id:1,name:"name",price:a.default.observable(23),num:2,total:46}]),ComputeColumns:[{title:"单价+",field:"id",type:"component",compFn:function(e){return{name:"y-grid-merge-td",params:{dataList:[{field:"price"},{field:"num",type:"render",renderFn:function(){return"<div>数量："+e.num+"</div>"}},{field:"id",type:"component",compFn:function(){return{name:"y-input",params:{value:e.price,placeholder:"你好世界"}}}}],row:e}}}},{title:"总价",field:"total"}],gridLazy:{lazyStart:a.default.observable(0),lazyEnd:a.default.observable(10)},pageRows:a.default.observableArray(),pageColumns:[{type:"checkbox"},{title:"列1",field:"field1"},{title:"列2",field:"field2"}],crossPageRows:a.default.observableArray([]),handleChange:function(t,n){0===t?e.pageRows([{id:1,field1:"field1",field2:"field2"},{id:2,field1:"field11",field2:"field21"},{id:3,field1:"field12",field2:"field22"}]):e.pageRows([{id:4,field1:"field4",field2:"field4"},{id:5,field1:"field5",field2:"field25"}])}};e.pageRows([{id:1,field1:"field1",field2:"field2"},{id:2,field1:"field11",field2:"field21"},{id:3,field1:"field12",field2:"field22"}]);for(var t=[],n=0;n<500;n++)t.push({a:n,b:"b",c:"c"});e.lazyRows=a.default.observableArray(t);var o=null,i=null;setTimeout(function(){o=window.ycloud.$refs.lazygrid,i=window.$(o.$el).find(".y-grid-body table")[0]}),e.lazyScroll=function(n,r){var a=o.getFitIndexByScrollTop(r);if(-1===a){a=Math.round(t.length*r/i.offsetHeight)}e.gridLazy.lazyStart(a-30<t.length-t.length/5?a-30:t.length-t.length/5),e.gridLazy.lazyEnd(a+30>t.length?t.length:a+30)},e.lazyColumns=[{title:"a",field:"a",width:200,lock:!0},{title:"b",field:"b",width:100,type:"render",renderFn:function(e){return e.a%7==0?"<div>1</div><div>2</div><div>3</div><div>5</div>":e.a.toString().split("").indexOf("3")>=0?"<div>5</div><div>2</div><div>3</div><div>5</div><div>5</div><div>5</div>":"12,3,4"}},{title:"c",field:"c",width:200},{title:"b",field:"b",width:200},{title:"c",field:"c",width:200}],a.default.applyBindings(e,document.getElementById("app"))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(63),i=_interopRequireDefault(o),r=n(0),a=_interopRequireDefault(r),l=n(4),d=_interopRequireDefault(l);n(40),t.default={template:i.default,init:init}},40:function(e,t,n){"use strict";n(41),n(56)},41:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=a.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var o=n(42),i=_interopRequireDefault(o);n(43),n(44);var r=n(0),a=_interopRequireDefault(r);a.default.components.register("demo",{viewModel:init,template:i.default})},42:function(e,t){e.exports='<div class="demo">\n  <div class="demo-show">\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\n  </div>\n  <div class="demo-split"></div>\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\n    <y-code params="code:code"></y-code>\n  </div>\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\n</div>\n'},43:function(e,t){},44:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,t){var n=this;this.$el=t.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var t=new c.default(".copy",{text:function(){return e.code}});t.on("success",function(e){e.clearSelection(),t.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){d.default.highlightBlock(n.$el)})}var o=n(45),i=_interopRequireDefault(o);n(46);var r=n(0),a=_interopRequireDefault(r),l=n(3),d=_interopRequireDefault(l),s=n(47),c=_interopRequireDefault(s);n(55),a.default.components.register("y-code",{viewModel:{createViewModel:function(e,t){return new Init(e,t.element)}},template:i.default})},45:function(e,t){e.exports='<div class="code">\n  <div class="tools">\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\n  </div>\n  <pre><code class="html" data-bind="text: code"></code></pre>\n</div>\n'},46:function(e,t){},47:function(e,t,n){var o,i,r;!function(a,l){i=[e,n(48),n(50),n(51)],o=l,void 0!==(r="function"==typeof o?o.apply(t,i):o)&&(e.exports=r)}(0,function(e,t,n,o){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function getAttributeValue(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var i=_interopRequireDefault(t),r=_interopRequireDefault(n),a=_interopRequireDefault(o),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),s=function(e){function Clipboard(e,t){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(t),n.listenClick(e),n}return _inherits(Clipboard,e),d(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===l(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,a.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new i.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var t=getAttributeValue("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),Clipboard}(r.default);e.exports=s})},48:function(e,t,n){var o,i,r;!function(a,l){i=[e,n(49)],o=l,void 0!==(r="function"==typeof o?o.apply(t,i):o)&&(e.exports=r)}(0,function(e,t){"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(e){return e&&e.__esModule?e:{default:e}}(t),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),r=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return i(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var o=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=o+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":o(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=r})},49:function(e,t){function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var o=window.getSelection(),i=document.createRange();i.selectNodeContents(e),o.removeAllRanges(),o.addRange(i),t=o.toString()}return t}e.exports=select},50:function(e,t){function E(){}E.prototype={on:function(e,t,n){var o=this.e||(this.e={});return(o[e]||(o[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function listener(){o.off(e,listener),t.apply(n,arguments)}var o=this;return listener._=t,this.on(e,listener,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),o=0,i=n.length;for(o;o<i;o++)n[o].fn.apply(n[o].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),o=n[e],i=[];if(o&&t)for(var r=0,a=o.length;r<a;r++)o[r].fn!==t&&o[r].fn._!==t&&i.push(o[r]);return i.length?n[e]=i:delete n[e],this}},e.exports=E},51:function(e,t,n){function listen(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!o.string(t))throw new TypeError("Second argument must be a String");if(!o.fn(n))throw new TypeError("Third argument must be a Function");if(o.node(e))return listenNode(e,t,n);if(o.nodeList(e))return listenNodeList(e,t,n);if(o.string(e))return listenSelector(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}function listenNodeList(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}function listenSelector(e,t,n){return i(document.body,e,t,n)}var o=n(52),i=n(53);e.exports=listen},52:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},53:function(e,t,n){function _delegate(e,t,n,o,i){var r=listener.apply(this,arguments);return e.addEventListener(n,r,i),{destroy:function(){e.removeEventListener(n,r,i)}}}function delegate(e,t,n,o,i){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,o,i)}))}function listener(e,t,n,i){return function(n){n.delegateTarget=o(n.target,t),n.delegateTarget&&i.call(e,n)}}var o=n(54);e.exports=delegate},54:function(e,t){function closest(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var o=Element.prototype;o.matches=o.matchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector||o.webkitMatchesSelector}e.exports=closest},55:function(e,t){},56:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var o=n(57),i=_interopRequireDefault(o);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:i.default})},57:function(e,t){e.exports='<h1>\n  <span data-bind="text: name"></span>组件\n</h1>\n\x3c!-- ko if: link--\x3e\n<h2>\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\n    <span data-bind="text: name"></span>组件API文档\n  </a>\n</h2>\n\x3c!-- /ko --\x3e\n<h2>代码示例</h2>\n'},63:function(e,t){e.exports='<div class="y-box">\n  <demo params="code:code[0]">\n    <div class="code-top row">\n      <div class="col-md-12">\n        <y-grid params="maxheight:\'265px\',rows:$root.caculateRows, columns: $root.caculateMainColumns, caculateColumns: $root.caculateColumns">\n        </y-grid>\n      </div>\n    </div>\n    <div class="code-split">\n      <span>合计行</span>\n    </div>\n    <div class="code-bottom">\n      <p>1.添加参数<code>caculateColumns</code></p>\n      <p>2.注意只有y-grid组件支持，y-basicgrid暂时不支持</p>\n    </div>\n  </demo>\n  <demo params="code:code[3]">\n    <div class="code-top row">\n      <div class="col-md-12">\n        <y-grid params="\n          crossPageSelectedRows: $root.crossPageRows,\n          onPageChange:$root.handleChange,\n          onSizeChange:$root.handleChange,\n          pagination:true,totalCount:ko.observable(20),\n          maxheight:\'auto\',\n          rows:$root.pageRows,\n          columns: $root.pageColumns">\n        </y-grid>\n        <div>\n          当前勾选的数据有，\n          <span data-bind="text: JSON.stringify($root.crossPageRows())"></span>\n        </div>\n      </div>\n    </div>\n    <div class="code-split">\n      <span>表格跨页勾选数据</span>\n    </div>\n    <div class="code-bottom">\n      <p>1.添加参数<code>crossPageSelectedRows</code></p>\n      <p>2.参数需要设置为ko.observableArray</p>\n      <p>3.默认数据唯一标识字段为<code>\'id\'</code>，如果<code>\'id\'</code>非唯一标识则传入<code>crossPageRowPrimaryKey: \'field\'</code>,field代表行唯一的字段名</p>\n    </div>\n  </demo>\n  <demo params="code:code[1]">\n    <div class="code-top row">\n      <div class="col-md-12">\n        <y-basicgrid params="maxheight:\'205px\',ref:\'loadingGrid\',columns:$root.ComputeColumns,rows: $root.ComputeRows"></y-basicgrid>\n      </div>\n    </div>\n    <div class="code-split">\n      <span>单元格多字段合并（含组件）</span>\n    </div>\n    <div class="code-bottom">\n      <p>grid中renderFn只支持简单文本的拼装，当遇到多件级别的封装原本需要额外定义组件，使用component引入，y-grid-merge-td提供了一种简单多组件拼装的方式</p>\n      <p>1.使用<code>y-grid-merge-td</code>组件，params中定义 <code>dataList</code>和<code>row</code>即可</p>\n      <p>2.dataList定义方式和columns一样，参考右侧代码</p>\n    </div>\n  </demo>\n  <demo params="code:code[2]">\n    <div class="code-top row">\n      <div class="col-md-12">\n        <y-basicgrid params="ref:\'lazygrid\',lockcolumn: true,lockhead:true,handleScroll:$root.lazyScroll,lazy: $root.gridLazy, rows: $root.lazyRows, columns: $root.lazyColumns">\n        </y-basicgrid>\n      </div>\n    </div>\n    <div class="code-split">\n      <span>不定行高+锁定列，百行、千行复杂表格异步滚动加载</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        当表格复杂度提升之后（各种组件组合使用）、百行千行表格渲染速度会变慢、需要进行异步滚动加载。\n        简单数据展示类直接展示即可，只针对复杂 多数据组合 + 多组件组合的表格\n      </p>\n      <p>1.使用<code>y-basicgrid</code>组件，<code>y-grid</code>组件暂不支持</p>\n      <p>\n        2.定义<code>lazy: {lazyStart: ko.observable(0), lazyEnd: ko.observable(50)}</code>\n      </p>\n      <p>\n        3. lazyStart->lazyEnd 表示当前页面需要显示的行索引的开始和截止\n      </p>\n      <p>\n        4. 在业务页面通过监听页面的<code>scroll</code>、或监听表格内部的<code>handleScroll</code>事件，动态修改lazyStart和lazyEnd的值\n        来实现滚动异步加载\n      </p>\n      <p>\n        5.如果没有固定列滚动的时候效果会更好一点，后续优化\n      </p>\n      <p>\n        6.如果确保行高是固定的（td设置了相应样式不会超过指定高度），则scroll中的计算方式可大幅度简化\n      </p>\n    </div>\n  </demo>\n</div>\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,