webpackJsonp([15],{18:function(e,n,t){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e=new window.u.DataTable({meta:{id:"",name:"",price:"",num:"",total:"",date:"",datetime:"",financial:""}}),n=new window.u.DataTable({meta:{id:"",name:"",price:"",num:"",total:"",date:""}});e.on("price.valueChange",function(e){var n=e.rowObj.getValue("price"),t=e.rowObj.getValue("num"),i=n*t;e.rowObj.ref("total")(i)});var t={rowspancol:[{title:'<div title="第一列">第一列</div>',width:"100",field:"field1",type:"render",renderFn:function(e){return"<div>"+e.field1+"</div>\n          <span>第一列是由多列组成</span>\n        "}},{title:"第二列",width:"100",field:"field2"},{title:"第三列",width:"100",field:"field3"},{title:"第四列折行的列名",width:"100",field:"field4",align:"right"},{title:"第五列",width:"50%",field:"field5"},{title:"第六列",width:"50%",field:"field6"}],rowspanrows:r.default.observableArray(),rows:e.rows,morerows:n.rows,columnsRender:[{title:"id",field:"id"},{title:"name",field:"name",type:"render",renderFn:function(e){return"姓名：<span>"+e.getValue("name")+"</span>, 单价：<span>"+e.ref("price")()+"</span>"}}],columnsBase:[{title:"id",field:"id"},{title:"name",field:"name"}],columnsIndex:[{title:"id",field:"id",type:"checkbox"},{title:"序号",field:"id",type:"index",width:"80"},{title:"id",field:"id"},{title:"name",field:"name"}],columnsOper:[{title:"序号",field:"id",type:"index",width:"80"},{title:"name",field:"name"},{type:"operation",operationList:[{title:"切换disabled",click:function(e,n){return e._disabled(!0),!1},visible:function(e){return!e._disabled()}},{title:"操作2",click:function(e,n){return e._disabled(!1),!1}},{title:"操作3",click:function(e,n){return!1}},{title:"操作4",click:function(e,n){alert("操作4")}}]}],selectList:r.default.observableArray([{label:"23",value:23},{label:"31",value:31},{label:"100",value:100},{label:"200",value:200},{label:"300",value:300}]),columnsComp:[{title:"y-input组件",type:"component",compFn:function(e){return{name:"y-input",params:{value:e.ref("name")}}}},{title:"y-datepicker组件",type:"component",compFn:function(e){return{name:"y-datepicker",params:{data:e.ref("date")}}}},{title:"y-select组件",type:"component",compFn:function(e){return{name:"y-select",params:{dataList:t.selectList,id:e.ref("price"),label:e.ref("price")}}}}],handleGetSelectedRow:function(){console.log(window.ycloud.$refs.grid1.getSelectedRows())},handleChange:function(e,n){window.ycloud.notice.info("pageIndex:"+e+" pageSize："+n)},handleColumnVisible:function(){window.ycloud.$refs.grid2.setColVisibleByField("name",!1)},columns1:r.default.observableArray([{title:"供应商名称",field:"name",rowspan:2,width:200},{title:"报价信息",colspan:3,align:"center"},{title:"供应商联系方式",field:"cell",width:100,rowspan:2}]),columns2:r.default.observableArray([{title:"单价",field:"price"},{title:"数量",field:"num"},{title:"税率",field:"tax"}]),columnsDynamic1:r.default.observableArray([{title:"供应商名称",field:"name",rowspan:2,lock:!0,width:200},{title:"第{n}次报价信息",colspan:3,field:"price",loop:!0,uniqueKey:"price",looplength:function(e){return e.detailList.length},align:"center"},{title:"供应商联系方式",field:"cell",width:100,rowspan:2}]),columnsDynamic3:[{title:"A",field:"name",lock:!0,width:200},{title:"B",field:"cell",width:300},{title:"C",field:"name",width:200},{title:"D",field:"price",align:"center"},{title:"E",field:"cell",width:200}],columnsDynamic2:r.default.observableArray([{title:"单价",field:"price",width:50,loop:!0,type:"render",uniqueKey:"price",renderFn:function(e,n,t){return e.detailList[t._childIndex].price}},{title:"数量",field:"num",width:50,loop:!0,type:"render",uniqueKey:"price",renderFn:function(e,n,t){return e.detailList[t._childIndex].num}},{title:"税率",field:"tax",width:50,loop:!0,type:"render",uniqueKey:"price",renderFn:function(e,n,t){return e.detailList[t._childIndex].tax}}]),complexHeadRows:r.default.observableArray([{name:"北京供应商",cell:"18182736212",price:100,num:12,tax:"17%"},{name:"上海供应商",cell:"18182736212",price:100,num:12,tax:"17%"},{name:"天津供应商",cell:"18182736212",price:115,num:12,tax:"13%"},{name:"四川供应商",cell:"18182736212",price:98,num:12,tax:"17%"}]),columnsDataType:[{title:"日期",field:"date",dataType:"date"},{title:"日期时间",field:"datetime",dataType:"datetime"},{title:"财务数字",field:"financial",dataType:"financial"},{title:"去0处理",field:"financial",dataType:"removeZero"}],complexHeadRowsDynamic:r.default.observableArray([{name:"北京供应商",cell:"18182736212",detailList:[{price:100,num:12,tax:"17%"},{price:110,num:12,tax:"17%"},{price:112,num:12,tax:"17%"}]},{name:"上海供应商",cell:"18182736212",detailList:[{price:100,num:12,tax:"17%"},{price:110,num:12,tax:"17%"},{price:112,num:12,tax:"17%"}]},{name:"天津供应商",cell:"18182736212",detailList:[{price:98,num:12,tax:"17%"},{price:110,num:12,tax:"17%"},{price:115,num:12,tax:"17%"}]},{name:"四川供应商",cell:"18182736212",detailList:[{price:100,num:12,tax:"17%"},{price:101,num:12,tax:"17%"},{price:102,num:12,tax:"17%"}]}]),columns:[{title:"id",field:"id"},{title:"name",field:"name"},{title:"单价",field:"price",type:"component",compFn:function(e){return{name:"y-input",params:{type:"text",value:e.ref("price")}}}},{title:"数量",field:"num"},{title:"总价",field:"total"}],codeDataType:"\n      <template>\n      <y-basicgrid params=\"maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsDataType\"></y-basicgrid>\n      </template>\n      <script >\n       var vm = {\n          columnsDataType: [{\n            title: '日期',\n            field: 'date',\n            dataType: 'date'\n          }, {\n            title: '日期时间',\n            field: 'datetime',\n            dataType: 'datetime'\n          }, {\n            title: '财务数字',\n            field: 'financial',\n            dataType: 'financial'\n          }, {\n            title: '去0处理',\n            field: 'financial',\n            dataType: 'removeZero'\n          }],\n          rows: [{\n            id: 1001,\n            name: '张飞牛肉',\n            price: 23,\n            num: 2,\n            total: 46,\n            date: '2014-02-02',\n            datetime: '2014-02-02 02:02:04',\n            financial: '200000000.0700'\n          }, {\n            id: 1002,\n            name: '李白猪肉',\n            price: 31,\n            num: 2,\n            total: 46,\n            date: '2014-02-02',\n            datetime: 1527055083896,\n            financial: 200200000.020\n          }]\n       }\n      <\/script>\n    ",codecheckbox:"\n      <template>\n        <y-basicgrid params=\"maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex\"></y-basicgrid>\n      </template> \n      <script>\n        var viewmodel = {\n          columnsIndex: [{\n              title: 'id',\n              field: 'id',\n              type: 'checkbox'\n            }, {\n              title: '序号',\n              field: 'id',\n              type: 'index',\n              width: '80'\n            }, {\n              title: 'id',\n              field: 'id'\n            }, {\n              title: 'name',\n              field: 'name'\n            }\n          ]\n        }\n      <\/script>\n    ",code2:"\n      <template>\n        <y-basicgrid params=\"isDataTable:true,rows:$parent.rows, columns: $parent.columnsRender\"></y-basicgrid>\n      </template>  \n      <script>\n        viewmodel = {\n          rows: new u.DataTable({\n            meta: {\n              id: '',\n              name: '',\n              price: '',\n              num: '',\n              total: ''\n            }\n          }).rows,\n          columnsRender: [{\n            title: 'id',\n            field: 'id'\n          }, {\n            title: 'name',\n            field: 'name',\n            type: 'render',\n            renderFn (row) {\n              return '姓名：<span>' + row.getValue(\"name\") + '</span>, 单价：<span>' + row.getValue(\"price\") + '</span>'\n            }\n          }]\n        }\n      <\/script>\n    ",code3:"\n      <template>\n        <y-basicgrid params=\"isDataTable:true,rows:$parent.rows, columns: $parent.columnsOper\"></y-basicgrid>\n      </template>  \n      <script>\n        viewmodel = {\n          rows: new u.DataTable({\n            meta: {\n              id: '',\n              name: '',\n              price: '',\n              num: '',\n              total: ''\n            }\n          }).rows,\n          columnsOper: [{\n              title: '序号',\n              field: 'id',\n              type: 'index',\n              width: '80'\n            }, {\n              title: 'name',\n              field: 'name'\n            }, {\n              type: 'operation',\n              operationList: [\n                {\n                  title: '切换disabled',\n                  click: function (row, evt) {\n                    row._disabled(true)\n                    return false\n                  },\n                  visible: function (row) {\n                    return !row._disabled()\n                  }\n                }, {\n                  title: '操作2',\n                  click: function (row, evt) {\n                    row._disabled(false)\n                    return false\n                  }\n                }, {\n                  title: '操作3',\n                  click: function (row, evt) {\n                    return false\n                  }\n                }, {\n                  title: '操作4',\n                  click: function (row, evt) {\n                    alert('操作4')\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      <\/script>\n    ",code4:"\n      <template>\n        <y-basicgrid params=\"onPageChange:handleChange,onSizeChange:handleChange,pagination:true,totalCount:ko.observable(20),maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsBase\"></y-basicgrid>\n      </template>  \n      <script>\n        viewmodel = {\n          rows: new u.DataTable({\n            meta: {\n              id: '',\n              name: '',\n              price: '',\n              num: '',\n              total: ''\n            }\n          }).rows,\n          handleChange (pageIndex, pageSize) {\n            ycloud.notice.info('pageIndex:' + pageIndex + ' pageSize:' + pageSize)\n          },\n        }\n      <\/script>\n    ",code5:"\n      <template>\n        <y-basicgrid params=\"maxheight:'200px',lockhead:true, isDataTable:true,rows:$parent.morerows, columns: $parent.columnsBase\"></y-basicgrid>\n      </template>\n    ",code6:"\n      <template>\n        <y-basicgrid params=\"maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsComp\"></y-basicgrid>\n      </template>  \n      <script>\n        viewmodel = {\n          columnsComp: [{\n          title: '姓名',\n          type: 'component',\n          compFn: function (row) {\n            return {\n              name: 'y-input',\n              params: {\n                value: row.ref('name')\n              }\n            }\n          }\n        }, {\n          title: '日期',\n          type: 'component',\n          compFn: function (row) {\n            return {\n              name: 'y-datepicker',\n              params: {\n                data: row.ref('date')\n              }\n            }\n          }\n        }, {\n          title: '单价',\n          type: 'component',\n          compFn: function (row) {\n            return {\n              name: 'y-select',\n              params: {\n                dataList: viewmodel.selectList,\n                id: row.ref('price'),\n                label: row.ref('price')\n              }\n            }\n          }\n        }],\n        }\n      <\/script>\n    ",codeColumnsIndex:"\n    <y-basicgrid params=\"maxheight:'auto',isStripe:true,rowspan:{columnIndex: [1,3]},id:'rowspantable',columns:$root.rowspancol,rows: $root.rowspanrows\"></y-basicgrid>\n    ",code7:"\n      <template>\n        <y-basicgrid params=\"maxheight:'auto',isStripe:true,rowspan:{maxCol: 2},id:'rowspantable',columns:$root.rowspancol,rows: $root.rowspanrows\"></y-basicgrid>\n      </template>\n    ",code8:"\n      <template>\n        <y-basicgrid params=\"ref: 'grid1',maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex\"></y-basicgrid>\n      </template>\n      <script >\n        var viewmodel = {\n          handleGetSelectedRow () {\n            console.log(window.ycloud.$refs['grid1'].getSelectedRows())\n          }\n        }\n      <\/script>\n    ",code9:"\n      <template>\n        <y-basicgrid params=\"ref: 'grid2',maxheight:'auto',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex\"></y-basicgrid>\n      </template>\n      <script >\n        var viewmodel = {\n          handleColumnVisible () {\n            window.ycloud.$refs['grid2'].setColVisibleByField('name', false)\n          }\n        }\n      <\/script>\n    ",code10:"\n      <template>\n        <y-basicgrid params=\"\n          maxheight:'auto',\n          isTableBorder:true,\n          columns1:$root.columns1, \n          columns2: $root.columns2, \n          rows: $root.complexHeadRows\"></y-basicgrid>\n      </template> \n      <script>\n        viewmodel = {\n        columns1: ko.observableArray([\n          {\n            title: '供应商名称',\n            field: 'name',\n            rowspan: 2,\n            width: 200\n          }, {\n            title: '报价信息',\n            colspan: 3,\n            align: 'center'\n          }, {\n            title: '供应商联系方式',\n            field: 'cell',\n            width: 100,\n            rowspan: 2\n          }\n        ]),\n        columns2: ko.observableArray([\n          {\n            title: '单价',\n            field: 'price'\n          }, {\n            title: '数量',\n            field: 'num'\n          }, {\n            title: '税率',\n            field: 'tax'\n          }\n        ]),\n        complexHeadRows: ko.observableArray([\n          {\n            name: '北京供应商',\n            cell: '18182736212',\n            price: 100.00,\n            num: 12,\n            taxt: '17%'\n          }, {\n            name: '上海供应商',\n            cell: '18182736212',\n            price: 120.00,\n            num: 12,\n            taxt: '13%'\n          }, {\n            name: '天津供应商',\n            cell: '18182736212',\n            price: 115.00,\n            num: 12,\n            taxt: '13%'\n          }, {\n            name: '四川供应商',\n            cell: '18182736212',\n            price: 98.00,\n            num: 12,\n            taxt: '17%'\n          }\n        ])}\n      <\/script>\n    ",code11:"\n      <template>\n        <y-basicgrid params=\"\n        maxheight:'auto',\n        isTableBorder:true,\n        columns1:columnsDynamic1, \n        columns2: columnsDynamic2, \n        rows: complexHeadRowsDynamic\"></y-basicgrid>\n      </template> \n      <script>\n        viewmodel = {\n        columnsDynamic1: ko.observableArray([\n      {\n        title: '供应商名称',\n        field: 'name',\n        rowspan: 2,\n        width: 200\n      }, {\n        title: '第{n}次报价信息',\n        colspan: 3,\n        loop: true,\n        uniqueKey: 'price',\n        looplength: function (row) {\n          return row.detailList.length\n        },\n        align: 'center'\n      }, {\n        title: '供应商联系方式',\n        field: 'cell',\n        width: 100,\n        rowspan: 2\n      }\n    ]),\n    columnsDynamic2: ko.observableArray([\n      {\n        title: '单价',\n        width: 50,\n        loop: true,\n        type: 'render',\n        uniqueKey: 'price',\n        renderFn: function (row, index, col) {\n          return row.detailList[col._childIndex].price\n        }\n      }, {\n        title: '数量',\n        width: 50,\n        loop: true,\n        type: 'render',\n        uniqueKey: 'price',\n        renderFn: function (row, index, col) {\n          return row.detailList[col._childIndex].num\n        }\n      }, {\n        title: '税率',\n        width: 50,\n        loop: true,\n        type: 'render',\n        uniqueKey: 'price',\n        renderFn: function (row, index, col) {\n          return row.detailList[col._childIndex].tax\n        }\n      }\n    ]),\n        complexHeadRowsDynamic: ko.observableArray([\n      {\n        name: '北京供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 112.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '上海供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 112.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '天津供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 98.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 115.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '四川供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 101.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 102.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }\n    ])}\n      <\/script>\n    ",code12:"\n      <template>\n        <y-basicgrid params=\"\n        lockcolumn:true, \n        isTableBorder:true,\n        columns:$root.columnsDynamic3,\n        rows: $root.complexHeadRowsDynamic\"></y-basicgrid>\n      </template> \n      <script>\n        viewmodel = {\n        columnsDynamic3: [\n          {\n            title: 'A',\n            field: 'name',\n            lock: true,\n            width: 200\n          }, {\n            title: 'B',\n            field: 'cell',\n            width: 300\n          }, {\n            title: 'C',\n            field: 'name',\n            width: 200\n          }, {\n            title: 'D',\n            field: 'price',\n            align: 'center'\n          }, {\n            title: 'E',\n            field: 'cell',\n            width: 200\n          }\n        ],\n       complexHeadRowsDynamic: ko.observableArray([\n      {\n        name: '北京供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 112.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '上海供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 112.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '天津供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 98.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 110.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 115.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }, {\n        name: '四川供应商',\n        cell: '18182736212',\n        detailList: [{\n          price: 100.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 101.00,\n          num: 12,\n          tax: '17%'\n        }, {\n          price: 102.00,\n          num: 12,\n          tax: '17%'\n        }]\n      }\n    ])}\n      <\/script>\n    ",code:"\n      <template>\n        <y-basicgrid params=\"\n          isDataTable:true,\n          rows: rows, \n          columns: columns\">\n        </y-basicgrid>\n      </template>\n      <script>\n      var viewmodel = {\n          rows: new u.DataTable({\n            meta: {\n              id: '',\n              name: '',\n              price: '',\n              num: '',\n              total: ''\n            }\n          }).rows,\n          columns: [{\n            title: 'id',\n            field: 'id'\n          }, {\n            title: 'name',\n            field: 'name'\n          }, {\n            title: '单价',\n            field: 'price',\n            type: 'component',\n            compFn: function (row) {\n              return {\n                name: 'y-input',\n                params: {\n                  type: 'text',\n                  value: row.ref('price')\n                }\n              }\n            }\n          }, {\n            title: '数量',\n            field: 'num'\n          }, {\n            title: '总价',\n            field: 'total'\n          }]\n        };\n      <\/script>\n    "};r.default.applyBindings(t,document.getElementById("app")),setTimeout(function(){n.setSimpleData([{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46},{id:1001,name:"张飞牛肉",price:23,num:2,total:46},{id:1002,name:"李白猪肉",price:31,num:2,total:46}]),e.setSimpleData([{id:1001,name:"张飞牛肉",price:23,num:2,total:46,date:"2014-02-02",datetime:"2014-02-02 02:02:04",financial:"200000000.0700"},{id:1002,name:"李白猪肉",price:31,num:2,total:46,date:"2014-02-02",datetime:1527055083896,financial:200200000.02}]),t.rowspanrows([{field1:"A",field2:"A",field3:"C",field4:"D",field5:"E",field6:"F"},{field1:"A",field2:"A",field3:"C",field4:"D",field5:"E",field6:"F1"},{field1:"A",field2:"C",field3:"D",field4:"D",field5:"E",field6:"F2"},{field1:"A",field2:"C",field3:"E",field4:"D",field5:"E",field6:"F"},{field1:"B",field2:"B",field3:"C",field4:"D",field5:"E",field6:"F"},{field1:"B",field2:"B",field3:"C",field4:"D",field5:"E",field6:"F"},{field1:"B",field2:"B",field3:"C",field4:"D",field5:"E",field6:"F"}])},300)}Object.defineProperty(n,"__esModule",{value:!0});var i=t(61),o=_interopRequireDefault(i),a=t(0),r=_interopRequireDefault(a);t(40),n.default={template:o.default,init:init}},40:function(e,n,t){"use strict";t(41),t(56)},41:function(e,n,t){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=r.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var i=t(42),o=_interopRequireDefault(i);t(43),t(44);var a=t(0),r=_interopRequireDefault(a);r.default.components.register("demo",{viewModel:init,template:o.default})},42:function(e,n){e.exports='<div class="demo">\n  <div class="demo-show">\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\n  </div>\n  <div class="demo-split"></div>\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\n    <y-code params="code:code"></y-code>\n  </div>\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\n</div>\n'},43:function(e,n){},44:function(e,n,t){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,n){var t=this;this.$el=n.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var n=new s.default(".copy",{text:function(){return e.code}});n.on("success",function(e){e.clearSelection(),n.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){c.default.highlightBlock(t.$el)})}var i=t(45),o=_interopRequireDefault(i);t(46);var a=t(0),r=_interopRequireDefault(a),l=t(3),c=_interopRequireDefault(l),d=t(47),s=_interopRequireDefault(d);t(55),r.default.components.register("y-code",{viewModel:{createViewModel:function(e,n){return new Init(e,n.element)}},template:o.default})},45:function(e,n){e.exports='<div class="code">\n  <div class="tools">\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\n  </div>\n  <pre><code class="html" data-bind="text: code"></code></pre>\n</div>\n'},46:function(e,n){},47:function(e,n,t){var i,o,a;!function(r,l){o=[e,t(48),t(50),t(51)],i=l,void 0!==(a="function"==typeof i?i.apply(n,o):i)&&(e.exports=a)}(0,function(e,n,t,i){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function _inherits(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}function getAttributeValue(e,n){var t="data-clipboard-"+e;if(n.hasAttribute(t))return n.getAttribute(t)}var o=_interopRequireDefault(n),a=_interopRequireDefault(t),r=_interopRequireDefault(i),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function defineProperties(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,n,t){return n&&defineProperties(e.prototype,n),t&&defineProperties(e,t),e}}(),d=function(e){function Clipboard(e,n){_classCallCheck(this,Clipboard);var t=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return t.resolveOptions(n),t.listenClick(e),t}return _inherits(Clipboard,e),c(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===l(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var n=this;this.listener=(0,r.default)(e,"click",function(e){return n.onClick(e)})}},{key:"onClick",value:function(e){var n=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new o.default({action:this.action(n),target:this.target(n),text:this.text(n),container:this.container,trigger:n,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var n=getAttributeValue("target",e);if(n)return document.querySelector(n)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],n="string"==typeof e?[e]:e,t=!!document.queryCommandSupported;return n.forEach(function(e){t=t&&!!document.queryCommandSupported(e)}),t}}]),Clipboard}(a.default);e.exports=d})},48:function(e,n,t){var i,o,a;!function(r,l){o=[e,t(49)],i=l,void 0!==(a="function"==typeof i?i.apply(n,o):i)&&(e.exports=a)}(0,function(e,n){"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var t=function(e){return e&&e.__esModule?e:{default:e}}(n),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function defineProperties(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,n,t){return n&&defineProperties(e.prototype,n),t&&defineProperties(e,t),e}}(),a=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return o(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,n="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[n?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,t.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,t.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(n){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=a})},49:function(e,n){function select(e){var n;if("SELECT"===e.nodeName)e.focus(),n=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var t=e.hasAttribute("readonly");t||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),t||e.removeAttribute("readonly"),n=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var i=window.getSelection(),o=document.createRange();o.selectNodeContents(e),i.removeAllRanges(),i.addRange(o),n=i.toString()}return n}e.exports=select},50:function(e,n){function E(){}E.prototype={on:function(e,n,t){var i=this.e||(this.e={});return(i[e]||(i[e]=[])).push({fn:n,ctx:t}),this},once:function(e,n,t){function listener(){i.off(e,listener),n.apply(t,arguments)}var i=this;return listener._=n,this.on(e,listener,t)},emit:function(e){var n=[].slice.call(arguments,1),t=((this.e||(this.e={}))[e]||[]).slice(),i=0,o=t.length;for(i;i<o;i++)t[i].fn.apply(t[i].ctx,n);return this},off:function(e,n){var t=this.e||(this.e={}),i=t[e],o=[];if(i&&n)for(var a=0,r=i.length;a<r;a++)i[a].fn!==n&&i[a].fn._!==n&&o.push(i[a]);return o.length?t[e]=o:delete t[e],this}},e.exports=E},51:function(e,n,t){function listen(e,n,t){if(!e&&!n&&!t)throw new Error("Missing required arguments");if(!i.string(n))throw new TypeError("Second argument must be a String");if(!i.fn(t))throw new TypeError("Third argument must be a Function");if(i.node(e))return listenNode(e,n,t);if(i.nodeList(e))return listenNodeList(e,n,t);if(i.string(e))return listenSelector(e,n,t);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,n,t){return e.addEventListener(n,t),{destroy:function(){e.removeEventListener(n,t)}}}function listenNodeList(e,n,t){return Array.prototype.forEach.call(e,function(e){e.addEventListener(n,t)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(n,t)})}}}function listenSelector(e,n,t){return o(document.body,e,n,t)}var i=t(52),o=t(53);e.exports=listen},52:function(e,n){n.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},n.nodeList=function(e){var t=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===t||"[object HTMLCollection]"===t)&&"length"in e&&(0===e.length||n.node(e[0]))},n.string=function(e){return"string"==typeof e||e instanceof String},n.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},53:function(e,n,t){function _delegate(e,n,t,i,o){var a=listener.apply(this,arguments);return e.addEventListener(t,a,o),{destroy:function(){e.removeEventListener(t,a,o)}}}function delegate(e,n,t,i,o){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof t?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,n,t,i,o)}))}function listener(e,n,t,o){return function(t){t.delegateTarget=i(t.target,n),t.delegateTarget&&o.call(e,t)}}var i=t(54);e.exports=delegate},54:function(e,n){function closest(e,n){for(;e&&e.nodeType!==t;){if("function"==typeof e.matches&&e.matches(n))return e;e=e.parentNode}}var t=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var i=Element.prototype;i.matches=i.matchesSelector||i.mozMatchesSelector||i.msMatchesSelector||i.oMatchesSelector||i.webkitMatchesSelector}e.exports=closest},55:function(e,n){},56:function(e,n,t){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var i=t(57),o=_interopRequireDefault(i);_interopRequireDefault(t(0)).default.components.register("y-title",{viewModel:init,template:o.default})},57:function(e,n){e.exports='<h1>\n  <span data-bind="text: name"></span>组件\n</h1>\n\x3c!-- ko if: link--\x3e\n<h2>\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\n    <span data-bind="text: name"></span>组件API文档\n  </a>\n</h2>\n\x3c!-- /ko --\x3e\n<h2>代码示例</h2>\n'},61:function(e,n){e.exports='<div class="y-box">\n  <y-title params="name: \'Grid表格\', link: \'https://github.com/yonyouyc/blog/issues/32\'"></y-title>\n  <demo params="code:code">\n    <div class="code-top">\n      <y-basicgrid params="isDataTable:true,maxheight:\'auto\',rows:$parent.rows, columns: $parent.columnsBase"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>基础用法</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>isDataTable:true</code>表示rows对应的是DataTable里的rows\n      </p>\n      <p> <code>maxheight:\'auto\'</code>表示表格高度是根据内容动态扩展，适用于数量较少的表格展示 </p>\n      <p>\n        <code>columns</code>里设置title和filed即可\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code2">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsRender"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>自定义render</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          type: \'render\'\n        </code>表示启用自定义render展示\n      </p>\n      <p>\n        <code>\n          renderFn\n        </code>具体进行render渲染的函数\n      </p>\n      <p>\n          只支持简单html片段组装，不支持复杂ko指令或内嵌组件\n      </p>\n    </div>\n  </demo>\n  <demo params="code:codeDataType">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsDataType"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>自定义dataType</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          dataType: \'xxxx\'\n        </code>表示启用自定义数据格式化类型展示\n      </p>\n      <p>\n        dataType: \'date\' // 日期格式 支持 数字、字符串\n      </p>\n      <p>\n        dataType: \'datetime\' // 时间格式 支持 数字、字符串\n      </p>\n      <p>\n        dataType: \'removeZero\' // 去掉小数位末尾多余的0， 4.00 => 4\n      </p>\n      <p>\n        dataType: \'financial\' // 财务数字处理, 1000000 => 1,000,000\n      </p>\n    </div>\n  </demo>\n  <demo params="code:codecheckbox">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>序号列 + checkbox列</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          type: \'index\'\n        </code>表示显示序号列（需要在columns中占一列）\n      </p>\n      <p>\n        <code>\n          type: \'checkbox\'\n        </code>表示显示checkbox列 通常用支持多选的表格\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code3">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsOper"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>表格带操作列</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          type: \'operation\'\n        </code>表示是操作列\n      </p>\n      <p>\n        <code>\n          operationList.click [Funciton]\n        </code>点击后事件\n        <code>\n          operationList.visible [Funciton]\n        </code>显示隐藏状态，用于动态显示操作按钮\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code4">\n    <div class="code-top">\n      <y-basicgrid params="onPageChange:$root.handleChange,onSizeChange:$root.handleChange,pagination:true,totalCount:ko.observable(20),maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsBase"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>表格带分页</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          pagination: true\n        </code>表示启用分页\n      </p>\n      <p>\n        <code>\n          totalCount: ko.observable(20)\n        </code>如果需要有分页则必须有值，必须为ko对象\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code5">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'200px\',lockhead:true, isDataTable:true,rows:$parent.morerows, columns: $parent.columnsBase"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>表头锁定</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          lockhead: true\n        </code>表示表头锁定\n      </p>\n      <p>\n        如果需要锁定表头则<code>maxheight</code>不能为 <code>auto</code>,需指定高度(如：\'200px\')或不指定(默认10行高度)\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code6">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsComp"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>可编辑表格</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        列属性：\n        <code>\n          type: \'component\'\n        </code>表示这一列使用自定义组件\n        <code>\n          compFn\n        </code>具体用于渲染的组件用哪个\n      </p>\n      <p>\n        理论上每一列可以用任意的ko自定义组件来渲染\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code7">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isStripe:true,rowspan:{maxCol: 2},id:\'rowspantable\',columns:$root.rowspancol,rows: $root.rowspanrows"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>支持rowspan的表格</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          rowspan:{maxCol: 2}\n        </code>表示自动合并前两列（依据列的innerText来判断是否应该合并，请事先对row做好排序）\n      </p>\n    </div>\n  </demo>\n  <demo params="code:codeColumnsIndex">\n    <div class="code-top">\n      <y-basicgrid params="maxheight:\'auto\',isStripe:true,rowspan:{columnIndex: [1,3]},id:\'rowspantable\',columns:$root.rowspancol,rows: $root.rowspanrows"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>支持指定列rowspan的表格</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          rowspan:{columnIndex: [1,3]}\n        </code>表示合并第二列（索引1）和第四列（索引3），（请事先对row做好排序，注意和maxCol的区别，maxCol是类似树形结构从左到右的单元格合并）\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code10">\n    <div class="code-top">\n    <y-basicgrid params="maxheight:\'auto\',isTableBorder:true,columns1:$root.columns1, columns2: $root.columns2, rows: $root.complexHeadRows"></y-basicgrid>\n    </div>\n    <div class="code-split">\n    <span>复杂表头</span>\n    </div>\n    <div class="code-bottom">\n    <p>\n      复杂表头需要定义<code>columns1</code>和<code>columns2</code>两个属性（根据现有场景，目前只支持两行的复杂表头，目前只支持ko对象）\n    </p>\n    <p>\n      参照正常table实现的时候的第一行tr和第二行tr 设置对应的colspan和rowspan即可。\n    </p>\n    <p>\n      为保证样式美观 请确保复杂表头和 <code>isTableBorder:true</code> 配合使用\n    </p>\n    </div>\n  </demo>\n  <demo params="code:code11">\n    <div class="code-top">\n      <y-basicgrid params="headHeight:\'90px\',lockhead:true, maxheight:\'220px\',isTableBorder:true,columns1:$root.columnsDynamic1, columns2: $root.columnsDynamic2, rows: $root.complexHeadRowsDynamic"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>复杂表头 + 动态列</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        关键属性：<br>\n        1.返回的数据格式参见右侧代码complexHeadRowsDynamic，需要将动态列做为一个数组如：detailList放入row中<br>\n        2.第一行 columns的 <code>title</code>属性可以设置为 <code>codetitle: \'第{n}次报价信息\'</code>,{n}会自动替换成当前轮次数字 <br>\n        3.扩展重复列需要定义 <code>loop: true</code> <code>uniqueKey: \'xxx\'</code>(第一行中col的uniqueKey，需要和第二行中的包含列一一对应)<br>\n        4.<code>looplength: Function () {}</code> 可以根据row中的值动态返回循环的次数（一般情况下等于row下detailList数组的个数）<br>\n        5.具体列展示的值如果在<code>detailList</code>下则请使用<code>renderFn</code>来进行实现，三个参数第三个会返回<code>col</code>，<code>col._childIndex</code>表示对应<code>detailList</code>中的索引<br>\n        6.<code>headHeight:\'90px\'</code> 默认情况下普通表头高度是45px（默认值） 对于复杂表头需要传入自定义的高度\n      </p>\n      <p>\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code12">\n    <div class="code-top">\n      <y-basicgrid params="lockcolumn:true, isTableBorder:true,columns:$root.columnsDynamic3,rows: $root.complexHeadRowsDynamic"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>固定列（左侧+右侧）</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        关键属性：<br>\n        1.<code>lockcolumn:true</code>(会同时默认设置lockhead:true) <br>\n        2.定义columns需要指定所有列的宽度 <br>\n        3.定义columns把需要锁定的前N列设置<code>lock:true</code><br>\n        4.同时支持<code>lockright:true</code>，请将固定在右侧的列放在columns的末尾(暂无示例)\n      </p>\n      <p>\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code8">\n    <div class="code-top">\n      <y-button params="click:$root.handleGetSelectedRow">获取所有选中的行(参见console.log)</y-button>\n      <y-basicgrid params="ref: \'grid1\',maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>Grid实例方法</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          ycloud.$ref[\'grid1\'].getSelectedRows()\n        </code>\n      </p>\n    </div>\n  </demo>\n  <demo params="code:code9">\n    <div class="code-top">\n      <y-button params="click:$root.handleColumnVisible">将name设置为隐藏</y-button>\n      <y-basicgrid params="ref: \'grid2\',maxheight:\'auto\',isDataTable:true,rows:$parent.rows, columns: $parent.columnsIndex"></y-basicgrid>\n    </div>\n    <div class="code-split">\n      <span>Grid实例方法</span>\n    </div>\n    <div class="code-bottom">\n      <p>\n        <code>\n          ycloud.$ref[\'grid1\'].setColVisibleByField(\'name\', false)\n        </code>\n      </p>\n    </div>\n  </demo>\n\n</div>\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,