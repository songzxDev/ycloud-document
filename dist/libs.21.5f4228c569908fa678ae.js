webpackJsonp([21],[,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(){var t={code:{type:"\n      <template>\n        <y-button>Default</y-button>\n        <y-button params=\"type: 'primary', size: 'large'\">Primary</y-button>\n        <y-button params=\"type: 'ghost', size: 'large'\">Ghost</y-button>\n        <y-button params=\"type: 'dashed'\">Dashed</y-button>\n        <y-button params=\"type: 'text'\">Text</y-button>\n        <y-button params=\"type: 'info'\">Info</y-button>\n        <y-button params=\"type: 'success'\">Success</y-button>\n        <y-button params=\"type: 'warning'\">Warning</y-button>\n        <y-button params=\"type: 'error'\">Error</y-button>\n      </template>\n      ",shape:"\n      <template>\n        <y-button params=\"type: 'warning', shape: 'circle'\">0.0</y-button>\n        <y-button params=\"type: 'warning'\">0.0</y-button>\n      </template>\n      ",size:"\n      <template>\n        <y-button params=\"type: 'ghost', size: 'large'\">Large</y-button>\n        <y-button params=\"type: 'ghost'\">Default</y-button>\n        <y-button params=\"type: 'ghost', size: 'small'\">Small</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle', size: 'large'\">Large</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle'\">Default</y-button>\n        <y-button params=\"type: 'ghost', shape: 'circle', size: 'small'\">Small</y-button>\n      </template>\n      ",disabled:"\n      <template>\n        <y-button params=\"type: 'primary'\">Default</y-button>\n        <y-button params=\"type: 'primary', disabled: true\">Default(Disabled)</y-button>\n      </template>\n      ",loading:"\n      <template>\n        <y-button params=\"type: 'success'\">Success</y-button>\n        <y-button params=\"type: 'success', click: $parent.load, loading: $parent.loading\">Loading</y-button>\n      </template>\n      <script>\n        var viewmodel = {\n          loading: ko.observable(false),\n          load: () => {\n            viewModel.loading(true)\n            setTimeout(() => {\n              viewModel.loading(false)\n            }, 3000)\n          }\n        }\n      <\/script>\n      ",wait:"\n      <template>\n        <y-button params=\"type: 'error', click: $parent.wait\">Default</y-button>\n        <y-button params=\"type: 'error', click: $parent.wait, wait: 3000\">wait</y-button>\n      </template>\n      <script>\n        wait: () => {}\n      <script>\n      ",btnType_a:"\n      <template>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com'\">相对路径本页跳转</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', rootPath: true\">绝对路径本页跳转</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', target: '_blank'\">相对路径打开新开页</y-button>\n      <y-button params=\"type: 'info', btnType: 'a', url: 'www.baidu.com', rootPath: true, target: '_blank'\">绝对路径打开新开页</y-button>\n      </template>\n      "},loading:r.default.observable(!1),load:function(){t.loading(!0),setTimeout(function(){t.loading(!1)},3e3)},wait:function(){}};r.default.applyBindings(t,document.getElementById("app"))}Object.defineProperty(e,"__esModule",{value:!0});var o=n(60),i=_interopRequireDefault(o),a=n(0),r=_interopRequireDefault(a);n(40),e.default={template:i.default,init:init}},,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n(41),n(56)},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(t){this.code=t.code,this.isShowAll=r.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var o=n(42),i=_interopRequireDefault(o);n(43),n(44);var a=n(0),r=_interopRequireDefault(a);r.default.components.register("demo",{viewModel:init,template:i.default})},function(t,e){t.exports='<div class="demo">\n  <div class="demo-show">\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\n  </div>\n  <div class="demo-split"></div>\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\n    <y-code params="code:code"></y-code>\n  </div>\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\n</div>\n'},function(t,e){},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function Init(t,e){var n=this;this.$el=e.childNodes[0].childNodes[3],this.code=t.code,this.copy=function(){var e=new u.default(".copy",{text:function(){return t.code}});e.on("success",function(t){t.clearSelection(),e.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){l.default.highlightBlock(n.$el)})}var o=n(45),i=_interopRequireDefault(o);n(46);var a=n(0),r=_interopRequireDefault(a),s=n(3),l=_interopRequireDefault(s),c=n(47),u=_interopRequireDefault(c);n(55),r.default.components.register("y-code",{viewModel:{createViewModel:function(t,e){return new Init(t,e.element)}},template:i.default})},function(t,e){t.exports='<div class="code">\n  <div class="tools">\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\n  </div>\n  <pre><code class="html" data-bind="text: code"></code></pre>\n</div>\n'},function(t,e){},function(t,e,n){var o,i,a;!function(r,s){i=[t,n(48),n(50),n(51)],o=s,void 0!==(a="function"==typeof o?o.apply(e,i):o)&&(t.exports=a)}(0,function(t,e,n,o){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function getAttributeValue(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var i=_interopRequireDefault(e),a=_interopRequireDefault(n),r=_interopRequireDefault(o),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}(),c=function(t){function Clipboard(t,e){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(e),n.listenClick(t),n}return _inherits(Clipboard,t),l(Clipboard,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"===s(t.container)?t.container:document.body}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,r.default)(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new i.default({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return getAttributeValue("action",t)}},{key:"defaultTarget",value:function(t){var e=getAttributeValue("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return getAttributeValue("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,n=!!document.queryCommandSupported;return e.forEach(function(t){n=n&&!!document.queryCommandSupported(t)}),n}}]),Clipboard}(a.default);t.exports=c})},function(t,e,n){var o,i,a;!function(r,s){i=[t,n(49)],o=s,void 0!==(a="function"==typeof o?o.apply(e,i):o)&&(t.exports=a)}(0,function(t,e){"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(t){return t&&t.__esModule?t:{default:t}}(e),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function defineProperties(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,e,n){return e&&defineProperties(t.prototype,e),n&&defineProperties(t,n),t}}(),a=function(){function ClipboardAction(t){_classCallCheck(this,ClipboardAction),this.resolveOptions(t),this.initSelection()}return i(ClipboardAction,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.container=t.container,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var o=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=o+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":o(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),ClipboardAction}();t.exports=a})},function(t,e){function select(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var n=t.hasAttribute("readonly");n||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),n||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var o=window.getSelection(),i=document.createRange();i.selectNodeContents(t),o.removeAllRanges(),o.addRange(i),e=o.toString()}return e}t.exports=select},function(t,e){function E(){}E.prototype={on:function(t,e,n){var o=this.e||(this.e={});return(o[t]||(o[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function listener(){o.off(t,listener),e.apply(n,arguments)}var o=this;return listener._=e,this.on(t,listener,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),o=0,i=n.length;for(o;o<i;o++)n[o].fn.apply(n[o].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),o=n[t],i=[];if(o&&e)for(var a=0,r=o.length;a<r;a++)o[a].fn!==e&&o[a].fn._!==e&&i.push(o[a]);return i.length?n[t]=i:delete n[t],this}},t.exports=E},function(t,e,n){function listen(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!o.string(e))throw new TypeError("Second argument must be a String");if(!o.fn(n))throw new TypeError("Third argument must be a Function");if(o.node(t))return listenNode(t,e,n);if(o.nodeList(t))return listenNodeList(t,e,n);if(o.string(t))return listenSelector(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function listenNodeList(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function listenSelector(t,e,n){return i(document.body,t,e,n)}var o=n(52),i=n(53);t.exports=listen},function(t,e){e.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},e.nodeList=function(t){var n=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in t&&(0===t.length||e.node(t[0]))},e.string=function(t){return"string"==typeof t||t instanceof String},e.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},function(t,e,n){function _delegate(t,e,n,o,i){var a=listener.apply(this,arguments);return t.addEventListener(n,a,i),{destroy:function(){t.removeEventListener(n,a,i)}}}function delegate(t,e,n,o,i){return"function"==typeof t.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,function(t){return _delegate(t,e,n,o,i)}))}function listener(t,e,n,i){return function(n){n.delegateTarget=o(n.target,e),n.delegateTarget&&i.call(t,n)}}var o=n(54);t.exports=delegate},function(t,e){function closest(t,e){for(;t&&t.nodeType!==n;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var o=Element.prototype;o.matches=o.matchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector||o.webkitMatchesSelector}t.exports=closest},function(t,e){},function(t,e,n){"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function init(t){this.name=t.name||"",this.link=t.link||""}var o=n(57),i=_interopRequireDefault(o);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:i.default})},function(t,e){t.exports='<h1>\n  <span data-bind="text: name"></span>组件\n</h1>\n\x3c!-- ko if: link--\x3e\n<h2>\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\n    <span data-bind="text: name"></span>组件API文档\n  </a>\n</h2>\n\x3c!-- /ko --\x3e\n<h2>代码示例</h2>\n'},,,function(t,e){t.exports='<div class="y-box">\n  <y-title params="name: \'Button按钮\', link: \'https://github.com/yonyouyc/blog/issues/36\'"></y-title>\n  <demo params="code:code.type">\n    <div class="code-top">\n      <y-button>Default</y-button>\n      <y-button params="type: \'primary\'">Primary</y-button>\n      <y-button params="type: \'ghost\'">Ghost</y-button>\n      <y-button params="type: \'dashed\'">Dashed</y-button>\n      <y-button params="type: \'text\'">Text</y-button>\n      <hr class="hr-fix">\n      <y-button params="type: \'info\'">Info</y-button>\n      <y-button params="type: \'success\'">Success</y-button>\n      <y-button params="type: \'warning\'">Warning</y-button>\n      <y-button params="type: \'error\'">Error</y-button>\n    </div>\n    <div class="code-split">\n      <span>基础用法</span>\n    </div>\n    <div class="code-bottom">\n      按钮类型有：默认按钮、主按钮、幽灵按钮、虚线按钮、文字按钮以及四种颜色按钮。\n      通过设置<code>type</code>为<code>primary</code>、<code>ghost</code>、<code>dashed</code>、<code>text</code>、<code>info</code>、<code>success</code>、<code>warning</code>、<code>error</code>创建不同样式的按钮，不设置为默认样式。\n    </div>\n  </demo>\n\n  <demo params="code:code.shape">\n    <div class="code-top">\n      <y-button params="type: \'warning\', shape: \'circle\'">0.0</y-button>\n      <y-button params="type: \'warning\'">0.0</y-button>\n    </div>\n    <div class="code-split">\n      <span>按钮形状</span>\n    </div>\n    <div class="code-bottom">\n      通过设置<code>shape</code>属性为<code>circle</code>，可将按钮置为圆的形状。\n    </div>\n  </demo>\n\n  <demo params="code:code.size">\n    <div class="code-top">\n      <y-button params="type: \'ghost\', size: \'large\'">Large</y-button>\n      <y-button params="type: \'ghost\'">Default</y-button>\n      <y-button params="type: \'ghost\', size: \'small\'">Small</y-button>\n      <hr class="hr-fix">\n      <y-button params="type: \'ghost\', shape: \'circle\', size: \'large\'">Large</y-button>\n      <y-button params="type: \'ghost\', shape: \'circle\'">Default</y-button>\n      <y-button params="type: \'ghost\', shape: \'circle\', size: \'small\'">Small</y-button>\n    </div>\n    <div class="code-split">\n      <span>按钮尺寸</span>\n    </div>\n    <div class="code-bottom">\n      按钮有三种尺寸：大、默认（中）、小\n      通过设置<code>size</code>为<code>large</code>和<code>small</code>将按钮设置为大和小尺寸，不设置为默认（中）尺寸。\n    </div>\n  </demo>\n\n  <demo params="code:code.disabled">\n    <div class="code-top">\n      <y-button params="type: \'primary\'">Default</y-button>\n      <y-button params="type: \'primary\', disabled: true">Default(Disabled)</y-button>\n    </div>\n    <div class="code-split">\n      <span>不可用状态</span>\n    </div>\n    <div class="code-bottom">\n      通过添加<code>disabled</code>属性可将按钮设置为不可用状态。\n    </div>\n  </demo>\n\n  <demo params="code:code.loading">\n    <div class="code-top">\n      <y-button params="type: \'success\'">Success</y-button>\n      <y-button params="type: \'success\', click: $parent.load, loading: $parent.loading">Loading</y-button>\n    </div>\n    <div class="code-split">\n      <span>加载中状态</span>\n    </div>\n    <div class="code-bottom">\n      通过添加<code>loading</code>属性可以让按钮处于加载中状态，后两个按钮在点击时进入加载状态。\n    </div>\n  </demo>\n\n  <demo params="code:code.wait">\n    <div class="code-top">\n      <y-button params="type: \'error\', click: $parent.wait">Default</y-button>\n      <y-button params="type: \'error\', click: $parent.wait, wait: 3000">wait</y-button>\n    </div>\n    <div class="code-split">\n      <span>设置等待时间</span>\n    </div>\n    <div class="code-bottom">\n      通过添加<code>wait</code>属性为<code>n毫秒数</code>，可以让按钮处于不可点击状态，防止快速点击多次触发事件。\n    </div>\n  </demo>\n\n  <demo params="code:code.btnType_a">\n    <div class="code-top">\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\'">相对路径本页跳转</y-button>\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', rootPath: true">绝对路径本页跳转</y-button>\n      <hr class="hr-fix">\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', target: \'_blank\'">相对路径打开新开页</y-button>\n      <y-button params="type: \'info\', btnType: \'a\', url: \'www.baidu.com\', rootPath: true, target: \'_blank\'">绝对路径打开新开页</y-button>\n    </div>\n    <div class="code-split">\n      <span>btnType设置为a时</span>\n    </div>\n    <div class="code-bottom">\n      通过设置<code>btnType</code>为<code>a</code>，添加<code>url</code>为<code>目标url</code>，添加<code>rootPath</code>为<code>false/true(默认为false)</code>控制本页跳转或者新页面打开，<code>target</code>与a的target保持一致，规定在何处打开链接文档。\n    </div>\n  </demo>\n</div>\n'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,