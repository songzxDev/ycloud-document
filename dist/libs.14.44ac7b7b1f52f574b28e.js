webpackJsonp([14],{20:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e={code:["\n      <template>\n        <y-grid params=\"rows:$root.caculateRows, \n        columns: $root.caculateMainColumns, \n        caculateColumns: $root.caculateColumns\">\n        </y-grid>\n      </template>\n      <script>\n      var viewmodel = {\n        caculateColumns: [{\n          type: 'render',\n          _show: true,\n          renderFn (row) {\n            return '合计：'\n          }\n        }, {\n          _show: true,\n          type: 'render',\n          align: 'right',\n          // 在此自有定义你的合计计算方法\n          renderFn (row) {\n            return '¥ ' + _.reduce(viewmodel.caculateRows(), function (a, b) {\n              return {age: (a.age - 0) + (b.age - 0)}\n            }, {\n              age: 0\n            }).age\n          }\n        }, {\n          _show: true\n        }],\n        caculateRows: ko.observableArray([\n          {\n            name: 'name',\n            age: 24000.034,\n            sex: '男'\n          }, {\n            name: 'name',\n            age: 223291.0000000,\n            sex: '男'\n          }, {\n            name: 'name',\n            age: '2112389.010',\n            sex: '男'\n          }, {\n            name: 'name',\n            age: 2300000.01,\n            sex: '男'\n          }\n        ]),\n        caculateMainColumns: [{\n          title: '姓名',\n          field: 'name',\n          type: 'render',\n          renderFn: function (row) {\n            return \"<a href='http://www.baidu.com'>row.name</a>\"\n          }\n        }, {\n          title: '价格',\n          field: 'age',\n          align: 'right',\n          dataType: 'money'\n        }, {\n          title: '性别',\n          field: 'sex',\n        }]\n      } \n    <\/script>\n    ","\n    <template>\n      <y-basicgrid params=\"maxheight:'205px',ref:'loadingGrid',columns:$root.ComputeColumns,rows: $root.ComputeRows\"></y-basicgrid>\n    </template>\n    <script>\n      var viewmodel = {\n        ComputeRows: ko.observableArray([{\n          id: 1,\n          name: 'name',\n          price: ko.observable(23),\n          num: 2,\n          total: 46\n        }, {\n          id: 1,\n          name: 'name',\n          price: ko.observable(23),\n          num: 2,\n          total: 46\n        }]),\n        ComputeColumns: [{\n          title: '单价+',\n          field: 'id',\n          type: 'component',\n          compFn (row) {\n            return {\n              name: 'y-grid-merge-td',\n              params: {\n                dataList: [\n                  {\n                    field: 'price'\n                  }, {\n                    field: 'num',\n                    type: 'render',\n                    renderFn () {\n                      var html = '<div>数量：' + row.num + '</div>'\n                      return html\n                    }\n                  }, {\n                    field: 'id',\n                    type: 'component',\n                    compFn () {\n                      return {\n                        name: 'y-input',\n                        params: {\n                          value: row.price,\n                          placeholder: '你好世界'\n                        }\n                      }\n                    }\n                  }\n                ],\n                row: row\n              }\n            }\n          }\n        }, {\n          title: '总价',\n          field: 'total'\n        }]\n      } \n    <\/script>\n    ","\n      <template>\n        <y-basicgrid params=\"ref:'lazygrid',lockcolumn: true,lockhead:true,handleScroll:$root.lazyScroll,lazy: $root.gridLazy, rows: $root.lazyRows, columns: $root.lazyColumns\">\n        </y-basicgrid>\n      </template>\n      <script >\n      var viewmodel = {\n        gridLazy: {\n          lazyStart: ko.observable(0),\n          lazyEnd: ko.observable(10)\n        }\n      }\n      var lazyGrid = null\n      var el = null\n      setTimeout(function () {\n        lazyGrid = window.ycloud.$refs['lazygrid']\n        el = window.$(lazyGrid.$el).find('.y-grid-body table')[0]\n      })\n    \n      // 示例代码\n      viewmodel.lazyScroll = function (event, scrollTop) {\n        var index = lazyGrid.getFitIndexByScrollTop(scrollTop)\n        if (index === -1) {\n          var curIndex = Math.round(datas.length * scrollTop / el.offsetHeight)\n          index = curIndex\n        }\n        // 详细参数根据不同页面的数据级别灵活调整\n        viewmodel.gridLazy.lazyStart(index - 30 < datas.length - datas.length / 5 ? index - 30 : datas.length - datas.length / 5)\n        viewmodel.gridLazy.lazyEnd(index + 30 > datas.length ? datas.length : index + 30)\n      }\n      <\/script>\n    ","\n    <template>\n      <y-grid params=\"\n          crossPageSelectedRows: $root.crossPageRows,\n          onPageChange:$root.handleChange,\n          onSizeChange:$root.handleChange,\n          pagination:true,totalCount:ko.observable(20),\n          maxheight:'auto',\n          rows:$root.pageRows,\n          columns: $root.pageColumns\">\n        </y-grid>\n    </template>\n    <script>\n      var vm = {\n        crossPageRows: ko.observableArray([])\n      }\n    <\/script>\n    "],caculateRows:a.default.observableArray([{name:"name",age:24000.034,sex:"男"},{name:"name",age:223291,sex:"男"},{name:"name",age:"2112389.010",sex:"男"},{name:"name",age:2300000.01,sex:"男"}]),caculateMainColumns:[{title:"姓名",field:"name",type:"render",renderFn:function(e){return"<a href='http://www.baidu.com'>row.name</a>"}},{title:"价格",field:"age",align:"right",dataType:"money"},{title:"性别",field:"sex"}],caculateColumns:[{type:"render",_show:!0,renderFn:function(e){return"<b>合计：</b>"}},{_show:!0,type:"render",align:"right",renderFn:function(t){return"<span style=\"font-family: 'Microsoft YaHei'\">¥ </span>"+d.default.reduce(e.caculateRows(),function(e,t){return{age:e.age-0+(t.age-0)}},{age:0}).age}},{_show:!0}],ComputeRows:a.default.observableArray([{id:1,name:"name",price:a.default.observable(23),num:2,total:46},{id:1,name:"name",price:a.default.observable(23),num:2,total:46}]),ComputeColumns:[{title:"单价+",field:"id",type:"component",compFn:function(e){return{name:"y-grid-merge-td",params:{dataList:[{field:"price"},{field:"num",type:"render",renderFn:function(){return"<div>数量："+e.num+"</div>"}},{field:"id",type:"component",compFn:function(){return{name:"y-input",params:{value:e.price,placeholder:"你好世界"}}}}],row:e}}}},{title:"总价",field:"total"}],gridLazy:{lazyStart:a.default.observable(0),lazyEnd:a.default.observable(10)},pageRows:a.default.observableArray(),pageColumns:[{type:"checkbox"},{title:"列1",field:"field1"},{title:"列2",field:"field2"}],crossPageRows:a.default.observableArray([]),handleChange:function(t,n){0===t?e.pageRows([{id:1,field1:"field1",field2:"field2"},{id:2,field1:"field11",field2:"field21"},{id:3,field1:"field12",field2:"field22"}]):e.pageRows([{id:4,field1:"field4",field2:"field4"},{id:5,field1:"field5",field2:"field25"}])}};e.pageRows([{id:1,field1:"field1",field2:"field2"},{id:2,field1:"field11",field2:"field21"},{id:3,field1:"field12",field2:"field22"}]);for(var t=[],n=0;n<500;n++)t.push({a:n,b:"b",c:"c"});e.lazyRows=a.default.observableArray(t);var r=null,o=null;setTimeout(function(){r=window.ycloud.$refs.lazygrid,o=window.$(r.$el).find(".y-grid-body table")[0]}),e.lazyScroll=function(n,i){var a=r.getFitIndexByScrollTop(i);if(-1===a){a=Math.round(t.length*i/o.offsetHeight)}e.gridLazy.lazyStart(a-30<t.length-t.length/5?a-30:t.length-t.length/5),e.gridLazy.lazyEnd(a+30>t.length?t.length:a+30)},e.lazyColumns=[{title:"a",field:"a",width:200,lock:!0},{title:"b",field:"b",width:100,type:"render",renderFn:function(e){return e.a%7==0?"<div>1</div><div>2</div><div>3</div><div>5</div>":e.a.toString().split("").indexOf("3")>=0?"<div>5</div><div>2</div><div>3</div><div>5</div><div>5</div><div>5</div>":"12,3,4"}},{title:"c",field:"c",width:200},{title:"b",field:"b",width:200},{title:"c",field:"c",width:200}],a.default.applyBindings(e,document.getElementById("app"))}Object.defineProperty(t,"__esModule",{value:!0});var r=n(64),o=_interopRequireDefault(r),i=n(0),a=_interopRequireDefault(i),l=n(4),d=_interopRequireDefault(l);n(41),t.default={template:o.default,init:init}},41:function(e,t,n){"use strict";n(42),n(57)},42:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=a.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var r=n(43),o=_interopRequireDefault(r);n(44),n(45);var i=n(0),a=_interopRequireDefault(i);a.default.components.register("demo",{viewModel:init,template:o.default})},43:function(e,t){e.exports='<div class="demo">\r\n  <div class="demo-show">\r\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\r\n  </div>\r\n  <div class="demo-split"></div>\r\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\r\n    <y-code params="code:code"></y-code>\r\n  </div>\r\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\r\n</div>\r\n'},44:function(e,t){},45:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,t){var n=this;this.$el=t.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var t=new c.default(".copy",{text:function(){return e.code}});t.on("success",function(e){e.clearSelection(),t.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){d.default.highlightBlock(n.$el)})}var r=n(46),o=_interopRequireDefault(r);n(47);var i=n(0),a=_interopRequireDefault(i),l=n(3),d=_interopRequireDefault(l),s=n(48),c=_interopRequireDefault(s);n(56),a.default.components.register("y-code",{viewModel:{createViewModel:function(e,t){return new Init(e,t.element)}},template:o.default})},46:function(e,t){e.exports='<div class="code">\r\n  <div class="tools">\r\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\r\n  </div>\r\n  <pre><code class="html" data-bind="text: code"></code></pre>\r\n</div>\r\n'},47:function(e,t){},48:function(e,t,n){var r,o,i;!function(a,l){o=[e,n(49),n(51),n(52)],r=l,void 0!==(i="function"==typeof r?r.apply(t,o):r)&&(e.exports=i)}(0,function(e,t,n,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function getAttributeValue(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var o=_interopRequireDefault(t),i=_interopRequireDefault(n),a=_interopRequireDefault(r),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),s=function(e){function Clipboard(e,t){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(t),n.listenClick(e),n}return _inherits(Clipboard,e),d(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===l(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,a.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new o.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var t=getAttributeValue("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),Clipboard}(i.default);e.exports=s})},49:function(e,t,n){var r,o,i;!function(a,l){o=[e,n(50)],r=l,void 0!==(i="function"==typeof r?r.apply(t,o):r)&&(e.exports=i)}(0,function(e,t){"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(e){return e&&e.__esModule?e:{default:e}}(t),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),i=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return o(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var r=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=r+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":r(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=i})},50:function(e,t){function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var r=window.getSelection(),o=document.createRange();o.selectNodeContents(e),r.removeAllRanges(),r.addRange(o),t=r.toString()}return t}e.exports=select},51:function(e,t){function E(){}E.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function listener(){r.off(e,listener),t.apply(n,arguments)}var r=this;return listener._=t,this.on(e,listener,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,o=n.length;for(r;r<o;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],o=[];if(r&&t)for(var i=0,a=r.length;i<a;i++)r[i].fn!==t&&r[i].fn._!==t&&o.push(r[i]);return o.length?n[e]=o:delete n[e],this}},e.exports=E},52:function(e,t,n){function listen(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!r.string(t))throw new TypeError("Second argument must be a String");if(!r.fn(n))throw new TypeError("Third argument must be a Function");if(r.node(e))return listenNode(e,t,n);if(r.nodeList(e))return listenNodeList(e,t,n);if(r.string(e))return listenSelector(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}function listenNodeList(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}function listenSelector(e,t,n){return o(document.body,e,t,n)}var r=n(53),o=n(54);e.exports=listen},53:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},54:function(e,t,n){function _delegate(e,t,n,r,o){var i=listener.apply(this,arguments);return e.addEventListener(n,i,o),{destroy:function(){e.removeEventListener(n,i,o)}}}function delegate(e,t,n,r,o){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,r,o)}))}function listener(e,t,n,o){return function(n){n.delegateTarget=r(n.target,t),n.delegateTarget&&o.call(e,n)}}var r=n(55);e.exports=delegate},55:function(e,t){function closest(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}e.exports=closest},56:function(e,t){},57:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var r=n(58),o=_interopRequireDefault(r);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:o.default})},58:function(e,t){e.exports='<h1>\r\n  <span data-bind="text: name"></span>组件\r\n</h1>\r\n\x3c!-- ko if: link--\x3e\r\n<h2>\r\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\r\n    <span data-bind="text: name"></span>组件API文档\r\n  </a>\r\n</h2>\r\n\x3c!-- /ko --\x3e\r\n<h2>代码示例</h2>\r\n'},64:function(e,t){e.exports='<div class="y-box">\r\n  <demo params="code:code[0]">\r\n    <div class="code-top row">\r\n      <div class="col-md-12">\r\n        <y-grid params="maxheight:\'265px\',rows:$root.caculateRows, columns: $root.caculateMainColumns, caculateColumns: $root.caculateColumns">\r\n        </y-grid>\r\n      </div>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>合计行</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      <p>1.添加参数<code>caculateColumns</code></p>\r\n      <p>2.注意只有y-grid组件支持，y-basicgrid暂时不支持</p>\r\n    </div>\r\n  </demo>\r\n  <demo params="code:code[3]">\r\n    <div class="code-top row">\r\n      <div class="col-md-12">\r\n        <y-grid params="\r\n          crossPageSelectedRows: $root.crossPageRows,\r\n          onPageChange:$root.handleChange,\r\n          onSizeChange:$root.handleChange,\r\n          pagination:true,totalCount:ko.observable(20),\r\n          maxheight:\'auto\',\r\n          rows:$root.pageRows,\r\n          columns: $root.pageColumns">\r\n        </y-grid>\r\n        <div>\r\n          当前勾选的数据有，\r\n          <span data-bind="text: JSON.stringify($root.crossPageRows())"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>表格跨页勾选数据</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      <p>1.添加参数<code>crossPageSelectedRows</code></p>\r\n      <p>2.参数需要设置为ko.observableArray</p>\r\n      <p>3.默认数据唯一标识字段为<code>\'id\'</code>，如果<code>\'id\'</code>非唯一标识则传入<code>crossPageRowPrimaryKey: \'field\'</code>,field代表行唯一的字段名</p>\r\n    </div>\r\n  </demo>\r\n  <demo params="code:code[1]">\r\n    <div class="code-top row">\r\n      <div class="col-md-12">\r\n        <y-basicgrid params="maxheight:\'205px\',ref:\'loadingGrid\',columns:$root.ComputeColumns,rows: $root.ComputeRows"></y-basicgrid>\r\n      </div>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>单元格多字段合并（含组件）</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      <p>grid中renderFn只支持简单文本的拼装，当遇到多件级别的封装原本需要额外定义组件，使用component引入，y-grid-merge-td提供了一种简单多组件拼装的方式</p>\r\n      <p>1.使用<code>y-grid-merge-td</code>组件，params中定义 <code>dataList</code>和<code>row</code>即可</p>\r\n      <p>2.dataList定义方式和columns一样，参考右侧代码</p>\r\n    </div>\r\n  </demo>\r\n  <demo params="code:code[2]">\r\n    <div class="code-top row">\r\n      <div class="col-md-12">\r\n        <y-basicgrid params="ref:\'lazygrid\',lockcolumn: true,lockhead:true,handleScroll:$root.lazyScroll,lazy: $root.gridLazy, rows: $root.lazyRows, columns: $root.lazyColumns">\r\n        </y-basicgrid>\r\n      </div>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>不定行高+锁定列，百行、千行复杂表格异步滚动加载</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      <p>\r\n        当表格复杂度提升之后（各种组件组合使用）、百行千行表格渲染速度会变慢、需要进行异步滚动加载。\r\n        简单数据展示类直接展示即可，只针对复杂 多数据组合 + 多组件组合的表格\r\n      </p>\r\n      <p>1.使用<code>y-basicgrid</code>组件，<code>y-grid</code>组件暂不支持</p>\r\n      <p>\r\n        2.定义<code>lazy: {lazyStart: ko.observable(0), lazyEnd: ko.observable(50)}</code>\r\n      </p>\r\n      <p>\r\n        3. lazyStart->lazyEnd 表示当前页面需要显示的行索引的开始和截止\r\n      </p>\r\n      <p>\r\n        4. 在业务页面通过监听页面的<code>scroll</code>、或监听表格内部的<code>handleScroll</code>事件，动态修改lazyStart和lazyEnd的值\r\n        来实现滚动异步加载\r\n      </p>\r\n      <p>\r\n        5.如果没有固定列滚动的时候效果会更好一点，后续优化\r\n      </p>\r\n      <p>\r\n        6.如果确保行高是固定的（td设置了相应样式不会超过指定高度），则scroll中的计算方式可大幅度简化\r\n      </p>\r\n    </div>\r\n  </demo>\r\n</div>\r\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,