webpackJsonp([0],{22:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e={extraEdit:function(e){console.log(e)},codeExtra:"\n      <template>\n        <y-tree params=\"extraText:'编辑', extraEdit: $root.extraEdit,data:$root.treeData, height:'200px', loadData:$root.loadData\"></y-tree>\n      </template>\n      <script >\n      // 其他参数设置参考标准树的实现\n        var vm = {\n          extraEdit: function (vm) {\n            console.log(vm)\n          }\n        }\n      <\/script>\n    ",code:"\n      <template>\n        <y-tree params=\"\n        data:treeData, \n        height:'200px',\n        onChange: handleTreeSelect\"></y-tree>\n      </template>\n      <script>\n      var viewmodel = {\n         treeData: ko.observable([{\n          id: 1, name: '北京总公司', children: [\n            {\n              id: 2, name: '上海分公司', children: []\n            },\n            {\n              id: 3, name: '福建分公司', children: [\n              {\n                id: 4, name: '福州分公司', children: []\n              },\n              {\n                id: 5, name: '厦门分公司', children: []\n              }\n            ]\n            }\n          ]\n        }]),\n        handleTreeSelect (data) {\n          ycloud.notice.info(JSON.stringify(data))\n        }\n      };\n      <\/script>\n    ",codeCheckbox:"\n    <template>\n        <y-tree params=\"\n        selectedId: ko.observableArray[3,4],\n        selectedItem:$root.treeSelectedItems,\n        multiple:true,\n        data:$parent.asyncTreeData, \n        height:'200px', \n        loadData:$parent.loadData\"></y-tree>\n      </template>\n      <script>\n      var viewmodel = {\n        asyncTreeData: ko.observableArray([{id: 1, name: '全部'}]),\n        treeSelectedItems: ko.observableArray(),\n        loadData: function (params, cb) {\n          // 根据实际业务需求查询数据并返回\n          if (params.name !== '没有子节点') {\n            // 模拟异步请求\n            setTimeout(()=> {\n              cb([{id:Math.random(),name:'含有子节点'}, {id:Math.random(),name:'没有子节点'}])\n            }, 500)\n    \n          } else {\n            cb(null)\n          }\n        },\n      }\n      <\/script>\n    ",code2:"\n    <template>\n        <y-tree params=\"\n          data:asyncTreeData, \n          height:'200px', \n          loadData:loadData\">\n        </y-tree>\n      </template>\n      <script>\n      var viewmodel = {\n        asyncTreeData: ko.observableArray([{id: 1, name: '全部'}]),\n        loadData: function (params, cb) {\n          // 根据实际业务需求查询数据并返回\n          if (params.name !== '没有子节点') {\n            // 模拟异步请求\n            setTimeout(()=> {\n              cb([{id:Math.random(),name:'含有子节点'}, {id:Math.random(),name:'没有子节点'}])\n            }, 500)\n    \n          } else {\n            cb(null)\n          }\n        },\n      }\n      <\/script>\n    ",loadData:function(e,t){"没有子节点"!==e.name?setTimeout(function(){t([{id:Math.random(),name:"含有子节点"},{id:Math.random(),name:"没有子节点"}])},500):t(null)},asyncTreeData:a.default.observableArray([{id:1,name:"全部"}]),treeSelectedItems:a.default.observableArray(),treeData:a.default.observable([{id:1,name:"北京总公司",children:[{id:2,name:"上海分公司",children:[]},{id:3,name:"福建分公司",children:[{id:4,name:"福州分公司",children:[]},{id:5,name:"厦门分公司",children:[]}]}]}]),handleTreeSelect:function(e){c.default.notice.info(JSON.stringify(e))}};a.default.applyBindings(e,document.getElementById("app"))}Object.defineProperty(t,"__esModule",{value:!0});var r=n(66),i=_interopRequireDefault(r),o=n(0),a=_interopRequireDefault(o),l=n(1),c=_interopRequireDefault(l);n(41),t.default={template:i.default,init:init}},41:function(e,t,n){"use strict";n(42),n(57)},42:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=a.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var r=n(43),i=_interopRequireDefault(r);n(44),n(45);var o=n(0),a=_interopRequireDefault(o);a.default.components.register("demo",{viewModel:init,template:i.default})},43:function(e,t){e.exports='<div class="demo">\r\n  <div class="demo-show">\r\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\r\n  </div>\r\n  <div class="demo-split"></div>\r\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\r\n    <y-code params="code:code"></y-code>\r\n  </div>\r\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\r\n</div>\r\n'},44:function(e,t){},45:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,t){var n=this;this.$el=t.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var t=new d.default(".copy",{text:function(){return e.code}});t.on("success",function(e){e.clearSelection(),t.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){c.default.highlightBlock(n.$el)})}var r=n(46),i=_interopRequireDefault(r);n(47);var o=n(0),a=_interopRequireDefault(o),l=n(3),c=_interopRequireDefault(l),s=n(48),d=_interopRequireDefault(s);n(56),a.default.components.register("y-code",{viewModel:{createViewModel:function(e,t){return new Init(e,t.element)}},template:i.default})},46:function(e,t){e.exports='<div class="code">\r\n  <div class="tools">\r\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\r\n  </div>\r\n  <pre><code class="html" data-bind="text: code"></code></pre>\r\n</div>\r\n'},47:function(e,t){},48:function(e,t,n){var r,i,o;!function(a,l){i=[e,n(49),n(51),n(52)],r=l,void 0!==(o="function"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t,n,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function getAttributeValue(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var i=_interopRequireDefault(t),o=_interopRequireDefault(n),a=_interopRequireDefault(r),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),s=function(e){function Clipboard(e,t){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(t),n.listenClick(e),n}return _inherits(Clipboard,e),c(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===l(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,a.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new i.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var t=getAttributeValue("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),Clipboard}(o.default);e.exports=s})},49:function(e,t,n){var r,i,o;!function(a,l){i=[e,n(50)],r=l,void 0!==(o="function"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(e){return e&&e.__esModule?e:{default:e}}(t),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),o=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return i(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var r=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=r+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":r(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=o})},50:function(e,t){function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var r=window.getSelection(),i=document.createRange();i.selectNodeContents(e),r.removeAllRanges(),r.addRange(i),t=r.toString()}return t}e.exports=select},51:function(e,t){function E(){}E.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function listener(){r.off(e,listener),t.apply(n,arguments)}var r=this;return listener._=t,this.on(e,listener,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;for(r;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var o=0,a=r.length;o<a;o++)r[o].fn!==t&&r[o].fn._!==t&&i.push(r[o]);return i.length?n[e]=i:delete n[e],this}},e.exports=E},52:function(e,t,n){function listen(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!r.string(t))throw new TypeError("Second argument must be a String");if(!r.fn(n))throw new TypeError("Third argument must be a Function");if(r.node(e))return listenNode(e,t,n);if(r.nodeList(e))return listenNodeList(e,t,n);if(r.string(e))return listenSelector(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}function listenNodeList(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}function listenSelector(e,t,n){return i(document.body,e,t,n)}var r=n(53),i=n(54);e.exports=listen},53:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},54:function(e,t,n){function _delegate(e,t,n,r,i){var o=listener.apply(this,arguments);return e.addEventListener(n,o,i),{destroy:function(){e.removeEventListener(n,o,i)}}}function delegate(e,t,n,r,i){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,r,i)}))}function listener(e,t,n,i){return function(n){n.delegateTarget=r(n.target,t),n.delegateTarget&&i.call(e,n)}}var r=n(55);e.exports=delegate},55:function(e,t){function closest(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}e.exports=closest},56:function(e,t){},57:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var r=n(58),i=_interopRequireDefault(r);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:i.default})},58:function(e,t){e.exports='<h1>\r\n  <span data-bind="text: name"></span>组件\r\n</h1>\r\n\x3c!-- ko if: link--\x3e\r\n<h2>\r\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\r\n    <span data-bind="text: name"></span>组件API文档\r\n  </a>\r\n</h2>\r\n\x3c!-- /ko --\x3e\r\n<h2>代码示例</h2>\r\n'},66:function(e,t){e.exports='<div class="y-box">\r\n  <y-title params="name: \'Tree树\', link: \'https://github.com/yonyouyc/blog/issues/37\'"></y-title>\r\n  <demo params="code:code">\r\n    <div class="code-top">\r\n      <y-tree params="data:$parent.treeData, height:\'200px\',onChange: $parent.handleTreeSelect"></y-tree>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>基础用法</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      最简单的用法，点击可获取选中的值，树节点数据格式:<b>{id:\'\', name:\'\', children: []}</b>\r\n    </div>\r\n  </demo>\r\n  <demo params="code:code2">\r\n    <div class="code-top">\r\n      <y-tree params="data:$parent.asyncTreeData, height:\'200px\', loadData:$parent.loadData"></y-tree>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>异步加载</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      使用 <code>loadData</code>参数，传入获取子节点的函数即可\r\n    </div>\r\n  </demo>\r\n  <demo params="code:codeCheckbox">\r\n    <div class="code-top">\r\n      当前选中的是：<span data-bind="text: JSON.stringify($root.treeSelectedItems())"></span>\r\n      <y-tree params="selectedId: ko.observableArray[3,4],selectedItem:$root.treeSelectedItems,multiple:true,data:$parent.asyncTreeData, height:\'200px\', loadData:$parent.loadData"></y-tree>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>带checkbox多选</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      使用 <code>multiple:true</code>参数，即可显示checkbox <br>\r\n      传入默认勾选值可使用 <code>selectedId</code> 根据数据的id字段判断选中 <br>\r\n      <code>selectedItem</code> 可返回选中的项的全部数据内容\r\n    </div>\r\n  </demo>\r\n  <demo params="code: codeExtra">\r\n    <div class="code-top">\r\n      <y-tree params="extraText:\'编辑\', extraEdit: $root.extraEdit,data:$root.treeData, height:\'200px\', loadData:$root.loadData"></y-tree>\r\n    </div>\r\n    <div class="code-split">\r\n      <span>鼠标移入可编辑</span>\r\n    </div>\r\n    <div class="code-bottom">\r\n      使用 <code>extraText:\'编辑\',extraEdit:$root.extraEdit</code>参数<br>\r\n      传入编辑按钮显示文本，以及点击编辑回调事件，仅当鼠标移入当前及选中当前节点时起作用\r\n    </div>\r\n  </demo>\r\n\r\n</div>\r\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,