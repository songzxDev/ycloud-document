webpackJsonp([20],{19:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(){var e={code:["\n      <template>\n        <y-editgrid params=\"rows: $root.editgridrows, columns: $root.editgridcolumns\"></y-editgrid>\n      </template>\n      <script>\n        var viewmodel = {\n          editgridcolumns: ko.observableArray([{\n              width: '20%',\n              title: '品牌产地/材质',\n              field: 'product',\n              summaryType: 'render',\n              summaryFn: (row) => {\n                var template = \"<div><div>\" +\n                row.materialName + \"</div><div>\" + row.num + row.unit + \"需求组织：\" +\n                row.reqOrg + \"</div><div>规格：\" + row.spec + \"</div></div>\"\n                return template\n              },\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-input',\n                  params: {\n                    value: row.product\n                  }\n                }\n              }\n            }, {\n              width: '10%',\n              title: '税率',\n              field: 'taxrate',\n              align: 'right',\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-input',\n                  params: {\n                    value: row.taxrate,\n                    align: 'right'\n                  }\n                }\n              }\n            }, {\n              width: '10%',\n              title: '无税单价(元)',\n              align: 'right',\n              field: 'price',\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-input',\n                  params: {\n                    value: row.price,\n                    align: 'right'\n                  }\n                }\n              }\n            }, {\n              width: '10%',\n              title: '金额',\n              align: 'right',\n              field: 'amount',\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-input',\n                  params: {\n                    value: row.amount,\n                    align: 'right'\n                  }\n                }\n              }\n            }, {\n              width: '20%',\n              title: '交货期',\n              field: 'reqDate',\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-datepicker',\n                  params: {\n                    data: row.reqDate\n                  }\n                }\n              }\n            }, {\n              width: '20%',\n              title: '备注',\n              field: 'remark',\n              type: 'component',\n              compFn: (row) => {\n                return {\n                  name: 'y-input',\n                  params: {\n                    value: row.remark\n                  }\n                }\n              }\n      \n            }\n          ]),\n          editgridrows: ko.observableArray([{\n            materialName: '硫酸钾',\n            num: 2000,\n            unit: '吨',\n            reqOrg: '广东那方是你优先公司',\n            spec: 'XLLL 1号 #UIO 型号，历史采购档次一致',\n            product: '',\n            taxrate: 17,\n            price: 200.00,\n            amount: 400000.00,\n            reqDate: ko.observable(''),\n            holdDate: ko.observable(''),\n            remark: ''\n          }, {\n            materialName: '硫酸钾',\n            num: 200,\n            unit: '吨',\n            reqOrg: '广东那方是你优先公司',\n            spec: 'XLLL 1号 #UIO 型号，历史采购档次一致',\n            product: '',\n            taxrate: 17,\n            price: 220.00,\n            amount: 400000.00,\n            reqDate: ko.observable(''),\n            holdDate: ko.observable(''),\n            remark: ''\n          }, {\n            materialName: '硫酸钾',\n            num: 1000,\n            unit: '吨',\n            reqOrg: '广东那方是你优先公司',\n            spec: 'XLLL 1号 #UIO 型号，历史采购档次一致',\n            product: '',\n            taxrate: 17,\n            price: '',\n            amount: '',\n            reqDate: ko.observable(''),\n            holdDate: ko.observable(''),\n            remark: ''\n          }\n        ])\n        }\n      <\/script>\n    ","\n    <template>\n      <y-childgrid params=\"rows: $root.childgridrows, columns:$root.childgridcolumns\"></y-childgrid>\n    </template>\n    <script>\n      var viewmodel = {\n        childgridcolumns: [{\n          title: '姓名',\n          field: 'name',\n          width: '20%',\n          summaryType: 'render',\n          summaryFn: (row) => {\n            return '<div>' + row.title + '</div><p>这是一个summaryRow</p>'\n          },\n          childGridFn (row) {\n            return {\n              name: 'y-grid',\n              params: {\n                nohead: true,\n                noborder: true,\n                maxheight: 'auto',\n                columns: [{\n                  field: 'name',\n                  width: '20%',\n                }, {\n                  field: 'age',\n                  width: '10%'\n                }, {\n                  field: 'sex',\n                  width: '30%'\n                }],\n                rows: ko.observableArray(row.list)\n              }\n            }\n          }\n        }, {\n          title: '年龄',\n          field: 'age',\n          width: '10%'\n        }, {\n          title: '性别',\n          field: 'sex',\n          width: '30%'\n        }],\n        childgridrows: ko.observableArray([{\n          title: '第一行',\n          list: [\n            {\n              name: 'songjl',\n              age: 30,\n              sex: '男'\n            }, {\n              name: 'wuyg',\n              age: 35,\n              sex: '男'\n            }, {\n              name: 'wu2yg',\n              age: 15,\n              sex: '女'\n            }\n          ]\n        }, {\n          title: 'name2',\n          list: [\n            {\n              name: 'lixih',\n              age: 14,\n              sex: '女'\n            }, {\n              name: 'guotg',\n              age: 25,\n              sex: '男'\n            }\n          ]\n        }])\n      } \n    <\/script>\n    "],editgridrows:a.default.observableArray([{materialName:"硫酸钾",num:2e3,unit:"吨",reqOrg:"广东那方是你优先公司",spec:"XLLL 1号 #UIO 型号，历史采购档次一致",product:"",taxrate:17,price:200,amount:4e5,reqDate:a.default.observable(""),holdDate:a.default.observable(""),remark:""},{materialName:"硫酸钾",num:200,unit:"吨",reqOrg:"广东那方是你优先公司",spec:"XLLL 1号 #UIO 型号，历史采购档次一致",product:"",taxrate:17,price:220,amount:4e5,reqDate:a.default.observable(""),holdDate:a.default.observable(""),remark:""},{materialName:"硫酸钾",num:1e3,unit:"吨",reqOrg:"广东那方是你优先公司",spec:"XLLL 1号 #UIO 型号，历史采购档次一致",product:"",taxrate:17,price:"",amount:"",reqDate:a.default.observable(""),holdDate:a.default.observable(""),remark:""}]),editgridcolumns:a.default.observableArray([{width:"20%",title:"品牌产地/材质",field:"product",summaryType:"render",summaryFn:function(e){return"<div><div>"+e.materialName+"</div>\n        <div>"+e.num+e.unit+"\n          需求组织："+e.reqOrg+"\n        </div>\n        <div>规格："+e.spec+"</div></div>"},type:"component",compFn:function(e){return{name:"y-input",params:{value:e.product}}}},{width:"10%",title:"税率",field:"taxrate",align:"right",type:"component",compFn:function(e){return{name:"y-input",params:{value:e.taxrate,align:"right"}}}},{width:"10%",title:"无税单价(元)",align:"right",field:"price",type:"component",compFn:function(e){return{name:"y-input",params:{value:e.price,align:"right"}}}},{width:"10%",title:"金额",align:"right",field:"amount",type:"component",compFn:function(e){return{name:"y-input",params:{value:e.amount,align:"right"}}}},{width:"20%",title:"交货期",field:"reqDate",type:"component",compFn:function(e){return{name:"y-datepicker",params:{data:e.reqDate}}}},{width:"20%",title:"备注",field:"remark",type:"component",compFn:function(e){return{name:"y-input",params:{value:e.remark}}}}]),childgridcolumns:[{title:"姓名",field:"name",width:"20%",summaryType:"render",summaryFn:function(e){return"<div>"+e.title+"</div><p>这是一个summaryRow</p>"},childGridFn:function(e){return{name:"y-grid",params:{nohead:!0,noborder:!0,maxheight:"auto",columns:[{field:"name",width:"20%"},{field:"age",width:"10%"},{field:"sex",width:"30%"}],rows:a.default.observableArray(e.list)}}}},{title:"年龄",field:"age",width:"10%"},{title:"性别",field:"sex",width:"30%"}],childgridrows:a.default.observableArray([{title:"第一行",list:[{name:"songjl",age:30,sex:"男"},{name:"wuyg",age:35,sex:"男"},{name:"wu2yg",age:15,sex:"女"}]},{title:"name2",list:[{name:"lixih",age:14,sex:"女"},{name:"guotg",age:25,sex:"男"}]}])};a.default.applyBindings(e,document.getElementById("app"))}Object.defineProperty(t,"__esModule",{value:!0});var i=n(64),r=_interopRequireDefault(i),o=n(0),a=_interopRequireDefault(o);n(42),t.default={template:r.default,init:init}},42:function(e,t,n){"use strict";n(43),n(58)},43:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.code=e.code,this.isShowAll=a.default.observable(!1),this.toggle=function(){this.isShowAll(!this.isShowAll())}.bind(this)}var i=n(44),r=_interopRequireDefault(i);n(45),n(46);var o=n(0),a=_interopRequireDefault(o);a.default.components.register("demo",{viewModel:init,template:r.default})},44:function(e,t){e.exports='<div class="demo">\n  <div class="demo-show">\n  \x3c!-- ko template: { nodes: $componentTemplateNodes } --\x3e\x3c!-- /ko --\x3e\n  </div>\n  <div class="demo-split"></div>\n  <div class="demo-code" data-bind="css:{\'demo-hideCode\':!isShowAll()}">\n    <y-code params="code:code"></y-code>\n  </div>\n  <div class="demo-toggle" data-bind="click:toggle"><span class="fa" data-bind="css:{\'fa-angle-double-down\':!isShowAll(),\'fa-angle-double-up\':isShowAll()}"></span></div>\n</div>\n'},45:function(e,t){},46:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function Init(e,t){var n=this;this.$el=t.childNodes[0].childNodes[3],this.code=e.code,this.copy=function(){var t=new u.default(".copy",{text:function(){return e.code}});t.on("success",function(e){e.clearSelection(),t.destroy(),window.alert("代码已复制到剪贴板")})},setTimeout(function(){c.default.highlightBlock(n.$el)})}var i=n(47),r=_interopRequireDefault(i);n(48);var o=n(0),a=_interopRequireDefault(o),l=n(3),c=_interopRequireDefault(l),s=n(49),u=_interopRequireDefault(s);n(57),a.default.components.register("y-code",{viewModel:{createViewModel:function(e,t){return new Init(e,t.element)}},template:r.default})},47:function(e,t){e.exports='<div class="code">\n  <div class="tools">\n    <i class="fa fa-clipboard copy" data-bind="click: copy"></i>\n  </div>\n  <pre><code class="html" data-bind="text: code"></code></pre>\n</div>\n'},48:function(e,t){},49:function(e,t,n){var i,r,o;!function(a,l){r=[e,n(50),n(52),n(53)],i=l,void 0!==(o="function"==typeof i?i.apply(t,r):i)&&(e.exports=o)}(0,function(e,t,n,i){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function getAttributeValue(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var r=_interopRequireDefault(t),o=_interopRequireDefault(n),a=_interopRequireDefault(i),l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),s=function(e){function Clipboard(e,t){_classCallCheck(this,Clipboard);var n=_possibleConstructorReturn(this,(Clipboard.__proto__||Object.getPrototypeOf(Clipboard)).call(this));return n.resolveOptions(t),n.listenClick(e),n}return _inherits(Clipboard,e),c(Clipboard,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===l(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,a.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new r.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return getAttributeValue("action",e)}},{key:"defaultTarget",value:function(e){var t=getAttributeValue("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return getAttributeValue("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach(function(e){n=n&&!!document.queryCommandSupported(e)}),n}}]),Clipboard}(o.default);e.exports=s})},50:function(e,t,n){var i,r,o;!function(a,l){r=[e,n(51)],i=l,void 0!==(o="function"==typeof i?i.apply(t,r):i)&&(e.exports=o)}(0,function(e,t){"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(e){return e&&e.__esModule?e:{default:e}}(t),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&defineProperties(e.prototype,t),n&&defineProperties(e,n),e}}(),o=function(){function ClipboardAction(e){_classCallCheck(this,ClipboardAction),this.resolveOptions(e),this.initSelection()}return r(ClipboardAction,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),ClipboardAction}();e.exports=o})},51:function(e,t){function select(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var i=window.getSelection(),r=document.createRange();r.selectNodeContents(e),i.removeAllRanges(),i.addRange(r),t=i.toString()}return t}e.exports=select},52:function(e,t){function E(){}E.prototype={on:function(e,t,n){var i=this.e||(this.e={});return(i[e]||(i[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function listener(){i.off(e,listener),t.apply(n,arguments)}var i=this;return listener._=t,this.on(e,listener,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),i=0,r=n.length;for(i;i<r;i++)n[i].fn.apply(n[i].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),i=n[e],r=[];if(i&&t)for(var o=0,a=i.length;o<a;o++)i[o].fn!==t&&i[o].fn._!==t&&r.push(i[o]);return r.length?n[e]=r:delete n[e],this}},e.exports=E},53:function(e,t,n){function listen(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!i.string(t))throw new TypeError("Second argument must be a String");if(!i.fn(n))throw new TypeError("Third argument must be a Function");if(i.node(e))return listenNode(e,t,n);if(i.nodeList(e))return listenNodeList(e,t,n);if(i.string(e))return listenSelector(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function listenNode(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}function listenNodeList(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}function listenSelector(e,t,n){return r(document.body,e,t,n)}var i=n(54),r=n(55);e.exports=listen},54:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},55:function(e,t,n){function _delegate(e,t,n,i,r){var o=listener.apply(this,arguments);return e.addEventListener(n,o,r),{destroy:function(){e.removeEventListener(n,o,r)}}}function delegate(e,t,n,i,r){return"function"==typeof e.addEventListener?_delegate.apply(null,arguments):"function"==typeof n?_delegate.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,function(e){return _delegate(e,t,n,i,r)}))}function listener(e,t,n,r){return function(n){n.delegateTarget=i(n.target,t),n.delegateTarget&&r.call(e,n)}}var i=n(56);e.exports=delegate},56:function(e,t){function closest(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var i=Element.prototype;i.matches=i.matchesSelector||i.mozMatchesSelector||i.msMatchesSelector||i.oMatchesSelector||i.webkitMatchesSelector}e.exports=closest},57:function(e,t){},58:function(e,t,n){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function init(e){this.name=e.name||"",this.link=e.link||""}var i=n(59),r=_interopRequireDefault(i);_interopRequireDefault(n(0)).default.components.register("y-title",{viewModel:init,template:r.default})},59:function(e,t){e.exports='<h1>\n  <span data-bind="text: name"></span>组件\n</h1>\n\x3c!-- ko if: link--\x3e\n<h2>\n  <a data-bind="attr: {href: link}" target="_blank" style="color: #2baee9">\n    <span data-bind="text: name"></span>组件API文档\n  </a>\n</h2>\n\x3c!-- /ko --\x3e\n<h2>代码示例</h2>\n'},64:function(e,t){e.exports='<div class="y-box">\n  <demo params="code:code[0]">\n    <div class="code-top row">\n      <div class="col-md-12">\n        <y-editgrid params="rows: $root.editgridrows, columns: $root.editgridcolumns"></y-editgrid>\n      </div>\n    </div>\n    <div class="code-split">\n      <span>editgrid</span>\n    </div>\n    <div class="code-bottom">\n      <h4>可编辑表格</h4>\n      <p>1.如果要显示表头，则需要将相应表头设置<code>_show:true</code></p>\n      <p>2.可编辑表格分为summary行和普通编辑行。summary行支持 <code>summaryType:\'render\'</code>\n        和<code>summaryType:\'component\'</code>两种模式，和grid列本身的<code>type:render</code>和<code>type:component</code>实现一致\n      </p>\n      <p>3.<code>summaryFn</code>对应渲染函数</p>\n      <p>4.summaryType和summaryFn需要写在columns的第一列</p>\n    </div>\n  </demo>\n\n  <demo params="code:code[1]">\n    <div class="code-top">\n      <y-childgrid params="rows: $root.childgridrows, columns:$root.childgridcolumns"></y-childgrid>\n    </div>\n    <div class="code-split">\n      <span>childgrid</span>\n    </div>\n    <div class="code-bottom">\n      <h4>summary行+一对多主子表表格</h4>\n      <p>1.如果要显示表头，则需要将相应表头设置<code>_show:true</code></p>\n      <p>2.和可编辑表格一样包含summary行。summary行支持 <code>summaryType:\'render\'</code>\n        和 <code>summaryType:\'component\'</code>两种模式，和grid列本身的<code>type:render</code>和<code>type:component</code>实现一致\n      </p>\n      <p>3. <code>summaryFn</code>对应渲染函数</p>\n      <p>4.包含 <code>childGridFn</code>方法，用于根据row动态渲染子表，注意需要返回一个component</p>\n      <p>5.childGridFn嵌入的y-grid需要设置 <code>nohead: true</code><code>noborder: true</code><code>maxheight: \'auto\'</code></p>\n      <p>6.childGridFn需要写在columns的第一列</p>\n    </div>\n  </demo>\n</div>\n'}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,